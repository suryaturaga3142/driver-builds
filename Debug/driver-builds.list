
driver-builds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ec  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080053ec  080053ec  000063ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800548c  0800548c  000071a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800548c  0800548c  0000648c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005494  08005494  000071a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005494  08005494  00006494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005498  08005498  00006498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800549c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  08005504  00007068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  080055a4  00007108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007c8  200001a8  08005644  000071a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000970  08005644  00007970  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000071a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012465  00000000  00000000  000071d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002863  00000000  00000000  0001963b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e18  00000000  00000000  0001bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ac3  00000000  00000000  0001ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000299cf  00000000  00000000  0001d77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011d27  00000000  00000000  0004714a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb727  00000000  00000000  00058e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00154598  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000041c4  00000000  00000000  001545dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  001587a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a8 	.word	0x200001a8
 800021c:	00000000 	.word	0x00000000
 8000220:	080053d4 	.word	0x080053d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ac 	.word	0x200001ac
 800023c:	080053d4 	.word	0x080053d4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000614:	1d39      	adds	r1, r7, #4
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2201      	movs	r2, #1
 800061c:	4803      	ldr	r0, [pc, #12]	@ (800062c <__io_putchar+0x20>)
 800061e:	f002 ff4d 	bl	80034bc <HAL_UART_Transmit>
  return ch;
 8000622:	687b      	ldr	r3, [r7, #4]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200002ac 	.word	0x200002ac

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b09a      	sub	sp, #104	@ 0x68
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fdca 	bl	80011ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f85f 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f97b 	bl	8000938 <MX_GPIO_Init>
  MX_ETH_Init();
 8000642:	f000 f8cd 	bl	80007e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000646:	f000 f919 	bl	800087c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800064a:	f000 f947 	bl	80008dc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  MyGPIO drivers[4] = { {GPIOE, GPIO_PIN_10} , {GPIOD, GPIO_PIN_11} , {GPIOD, GPIO_PIN_12} , {GPIOD, GPIO_PIN_13} };
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <main+0xb8>)
 8000650:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000654:	461d      	mov	r5, r3
 8000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800065e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MyGPIO readers[4] = { {GPIOE, GPIO_PIN_13} , {GPIOE, GPIO_PIN_15} , {GPIOE, GPIO_PIN_14} , {GPIOE, GPIO_PIN_12} };
 8000662:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <main+0xbc>)
 8000664:	f107 0420 	add.w	r4, r7, #32
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  KeyPad pad;
  //pad.drivers = drivers;
  //pad.readers = readers;

  myKeyPad_Init(&pad, drivers, readers);
 8000676:	f107 0220 	add.w	r2, r7, #32
 800067a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fa47 	bl	8000b14 <myKeyPad_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  myKeyPad_Read(&pad);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fa6d 	bl	8000b68 <myKeyPad_Read>
	  printf("Res: %d\r\n", pad.num);
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	4619      	mov	r1, r3
 8000692:	4817      	ldr	r0, [pc, #92]	@ (80006f0 <main+0xc0>)
 8000694:	f003 ffd4 	bl	8004640 <iprintf>
	  for (int i = 0; i < 4; i++) {
 8000698:	2300      	movs	r3, #0
 800069a:	667b      	str	r3, [r7, #100]	@ 0x64
 800069c:	e01a      	b.n	80006d4 <main+0xa4>
		  for (int j = 0; j < 4; j++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80006a2:	e00e      	b.n	80006c2 <main+0x92>
			  printf("%d ", pad.buttons[i][j]);
 80006a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	3368      	adds	r3, #104	@ 0x68
 80006aa:	19da      	adds	r2, r3, r7
 80006ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80006ae:	4413      	add	r3, r2
 80006b0:	3b5c      	subs	r3, #92	@ 0x5c
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	480f      	ldr	r0, [pc, #60]	@ (80006f4 <main+0xc4>)
 80006b8:	f003 ffc2 	bl	8004640 <iprintf>
		  for (int j = 0; j < 4; j++) {
 80006bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80006be:	3301      	adds	r3, #1
 80006c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80006c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	dded      	ble.n	80006a4 <main+0x74>
		  }
		  printf("\r\n");
 80006c8:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <main+0xc8>)
 80006ca:	f004 f821 	bl	8004710 <puts>
	  for (int i = 0; i < 4; i++) {
 80006ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006d0:	3301      	adds	r3, #1
 80006d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80006d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	dde1      	ble.n	800069e <main+0x6e>
	  }
	  printf("\r\n");
 80006da:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <main+0xc8>)
 80006dc:	f004 f818 	bl	8004710 <puts>

	  HAL_Delay(100);
 80006e0:	2064      	movs	r0, #100	@ 0x64
 80006e2:	f000 fdd1 	bl	8001288 <HAL_Delay>
	  myKeyPad_Read(&pad);
 80006e6:	e7ce      	b.n	8000686 <main+0x56>
 80006e8:	08005400 	.word	0x08005400
 80006ec:	08005420 	.word	0x08005420
 80006f0:	080053ec 	.word	0x080053ec
 80006f4:	080053f8 	.word	0x080053f8
 80006f8:	080053fc 	.word	0x080053fc

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	@ 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 f8e0 	bl	80048d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000720:	f001 fd22 	bl	8002168 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	4b2c      	ldr	r3, [pc, #176]	@ (80007d8 <SystemClock_Config+0xdc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a2b      	ldr	r2, [pc, #172]	@ (80007d8 <SystemClock_Config+0xdc>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b29      	ldr	r3, [pc, #164]	@ (80007d8 <SystemClock_Config+0xdc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073c:	4b27      	ldr	r3, [pc, #156]	@ (80007dc <SystemClock_Config+0xe0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000744:	4a25      	ldr	r2, [pc, #148]	@ (80007dc <SystemClock_Config+0xe0>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <SystemClock_Config+0xe0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800075c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000760:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000770:	2360      	movs	r3, #96	@ 0x60
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fd4f 	bl	8002228 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000790:	f000 f9ba 	bl	8000b08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000794:	f001 fcf8 	bl	8002188 <HAL_PWREx_EnableOverDrive>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800079e:	f000 f9b3 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	2103      	movs	r1, #3
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 ffe0 	bl	8002784 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007ca:	f000 f99d 	bl	8000b08 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	@ 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <MX_ETH_Init+0x84>)
 80007e6:	4a20      	ldr	r2, [pc, #128]	@ (8000868 <MX_ETH_Init+0x88>)
 80007e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ea:	4b20      	ldr	r3, [pc, #128]	@ (800086c <MX_ETH_Init+0x8c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <MX_ETH_Init+0x8c>)
 80007f2:	2280      	movs	r2, #128	@ 0x80
 80007f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_ETH_Init+0x8c>)
 80007f8:	22e1      	movs	r2, #225	@ 0xe1
 80007fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_ETH_Init+0x8c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_ETH_Init+0x8c>)
 8000804:	2200      	movs	r2, #0
 8000806:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_ETH_Init+0x8c>)
 800080a:	2200      	movs	r2, #0
 800080c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_ETH_Init+0x84>)
 8000810:	4a16      	ldr	r2, [pc, #88]	@ (800086c <MX_ETH_Init+0x8c>)
 8000812:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <MX_ETH_Init+0x84>)
 8000816:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800081a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_ETH_Init+0x84>)
 800081e:	4a14      	ldr	r2, [pc, #80]	@ (8000870 <MX_ETH_Init+0x90>)
 8000820:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_ETH_Init+0x84>)
 8000824:	4a13      	ldr	r2, [pc, #76]	@ (8000874 <MX_ETH_Init+0x94>)
 8000826:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_ETH_Init+0x84>)
 800082a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800082e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000830:	480c      	ldr	r0, [pc, #48]	@ (8000864 <MX_ETH_Init+0x84>)
 8000832:	f000 fe33 	bl	800149c <HAL_ETH_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800083c:	f000 f964 	bl	8000b08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000840:	2238      	movs	r2, #56	@ 0x38
 8000842:	2100      	movs	r1, #0
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <MX_ETH_Init+0x98>)
 8000846:	f004 f843 	bl	80048d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_ETH_Init+0x98>)
 800084c:	2221      	movs	r2, #33	@ 0x21
 800084e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_ETH_Init+0x98>)
 8000852:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000856:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <MX_ETH_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001fc 	.word	0x200001fc
 8000868:	40028000 	.word	0x40028000
 800086c:	20000814 	.word	0x20000814
 8000870:	20000108 	.word	0x20000108
 8000874:	20000068 	.word	0x20000068
 8000878:	200001c4 	.word	0x200001c4

0800087c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 8000882:	4a15      	ldr	r2, [pc, #84]	@ (80008d8 <MX_USART3_UART_Init+0x5c>)
 8000884:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000886:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_USART3_UART_Init+0x58>)
 80008c0:	f002 fdae 	bl	8003420 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 f91d 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200002ac 	.word	0x200002ac
 80008d8:	40004800 	.word	0x40004800

080008dc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008e0:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2206      	movs	r2, #6
 80008ec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2201      	movs	r2, #1
 8000904:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000914:	2201      	movs	r2, #1
 8000916:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	f001 fae7 	bl	8001ef2 <HAL_PCD_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800092a:	f000 f8ed 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000334 	.word	0x20000334

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	@ 0x30
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b68      	ldr	r3, [pc, #416]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a67      	ldr	r2, [pc, #412]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b65      	ldr	r3, [pc, #404]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	4b62      	ldr	r3, [pc, #392]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a61      	ldr	r2, [pc, #388]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b5f      	ldr	r3, [pc, #380]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b5c      	ldr	r3, [pc, #368]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a5b      	ldr	r2, [pc, #364]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b59      	ldr	r3, [pc, #356]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b56      	ldr	r3, [pc, #344]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a55      	ldr	r2, [pc, #340]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b53      	ldr	r3, [pc, #332]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4b50      	ldr	r3, [pc, #320]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a4f      	ldr	r2, [pc, #316]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b4d      	ldr	r3, [pc, #308]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b4a      	ldr	r3, [pc, #296]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a49      	ldr	r2, [pc, #292]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b47      	ldr	r3, [pc, #284]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009de:	4b44      	ldr	r3, [pc, #272]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a43      	ldr	r2, [pc, #268]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 80009e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b41      	ldr	r3, [pc, #260]	@ (8000af0 <MX_GPIO_Init+0x1b8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009fc:	483d      	ldr	r0, [pc, #244]	@ (8000af4 <MX_GPIO_Init+0x1bc>)
 80009fe:	f001 fa5f 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a08:	483b      	ldr	r0, [pc, #236]	@ (8000af8 <MX_GPIO_Init+0x1c0>)
 8000a0a:	f001 fa59 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000a14:	4839      	ldr	r0, [pc, #228]	@ (8000afc <MX_GPIO_Init+0x1c4>)
 8000a16:	f001 fa53 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2140      	movs	r1, #64	@ 0x40
 8000a1e:	4838      	ldr	r0, [pc, #224]	@ (8000b00 <MX_GPIO_Init+0x1c8>)
 8000a20:	f001 fa4e 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4832      	ldr	r0, [pc, #200]	@ (8000b04 <MX_GPIO_Init+0x1cc>)
 8000a3c:	f001 f87c 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a40:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4826      	ldr	r0, [pc, #152]	@ (8000af4 <MX_GPIO_Init+0x1bc>)
 8000a5a:	f001 f86d 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4820      	ldr	r0, [pc, #128]	@ (8000af8 <MX_GPIO_Init+0x1c0>)
 8000a78:	f001 f85e 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a7c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a86:	2302      	movs	r3, #2
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4819      	ldr	r0, [pc, #100]	@ (8000af8 <MX_GPIO_Init+0x1c0>)
 8000a92:	f001 f851 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000a96:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4813      	ldr	r0, [pc, #76]	@ (8000afc <MX_GPIO_Init+0x1c4>)
 8000ab0:	f001 f842 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ab4:	2340      	movs	r3, #64	@ 0x40
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_GPIO_Init+0x1c8>)
 8000acc:	f001 f834 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad0:	2380      	movs	r3, #128	@ 0x80
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <MX_GPIO_Init+0x1c8>)
 8000ae4:	f001 f828 	bl	8001b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ae8:	bf00      	nop
 8000aea:	3730      	adds	r7, #48	@ 0x30
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	40021800 	.word	0x40021800
 8000b04:	40020800 	.word	0x40020800

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <Error_Handler+0x8>

08000b14 <myKeyPad_Init>:
 */

#include "main.h"
#include <stdio.h>

void myKeyPad_Init (KeyPad * keypad, MyGPIO drivers[], MyGPIO readers[]) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	keypad->drivers = drivers;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	601a      	str	r2, [r3, #0]
	keypad->readers = readers;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e010      	b.n	8000b54 <myKeyPad_Init+0x40>
		HAL_GPIO_WritePin(keypad->drivers[i].GPIOx, keypad->drivers[1].GPIO_Pin, RESET);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	6818      	ldr	r0, [r3, #0]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3308      	adds	r3, #8
 8000b44:	889b      	ldrh	r3, [r3, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f001 f9b9 	bl	8001ec0 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	ddeb      	ble.n	8000b32 <myKeyPad_Init+0x1e>
	}
	keypad->num = 0;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
	return;
 8000b60:	bf00      	nop
}
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <myKeyPad_Read>:

void myKeyPad_Read (KeyPad * keypad) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	keypad->num = 0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < 4; i++) {
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	e05d      	b.n	8000c38 <myKeyPad_Read+0xd0>
		HAL_GPIO_WritePin(keypad->drivers[i].GPIOx, keypad->drivers[i].GPIO_Pin, SET);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4413      	add	r3, r2
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4413      	add	r3, r2
 8000b92:	889b      	ldrh	r3, [r3, #4]
 8000b94:	2201      	movs	r2, #1
 8000b96:	4619      	mov	r1, r3
 8000b98:	f001 f992 	bl	8001ec0 <HAL_GPIO_WritePin>
		for (int j = 0; j < 4; j++) {
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	e034      	b.n	8000c0c <myKeyPad_Read+0xa4>
			GPIO_PinState pb = HAL_GPIO_ReadPin(keypad->readers[j].GPIOx, keypad->readers[j].GPIO_Pin);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4413      	add	r3, r2
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	889b      	ldrh	r3, [r3, #4]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f001 f968 	bl	8001e90 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73fb      	strb	r3, [r7, #15]
			keypad->buttons[3 - j][i] = pb;
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	f1c3 0303 	rsb	r3, r3, #3
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	441a      	add	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	7bfa      	ldrb	r2, [r7, #15]
 8000bd8:	701a      	strb	r2, [r3, #0]
			int cur_num = 1 + 4 * (3 - j) + i;
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	f1c3 0303 	rsb	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	3301      	adds	r3, #1
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	4413      	add	r3, r2
 8000be8:	60bb      	str	r3, [r7, #8]
			keypad->num = pb && cur_num > keypad->num ? cur_num : keypad->num;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <myKeyPad_Read+0x92>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	dc02      	bgt.n	8000c00 <myKeyPad_Read+0x98>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	e000      	b.n	8000c02 <myKeyPad_Read+0x9a>
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6193      	str	r3, [r2, #24]
		for (int j = 0; j < 4; j++) {
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	ddc7      	ble.n	8000ba2 <myKeyPad_Read+0x3a>
		}
		HAL_GPIO_WritePin(keypad->drivers[i].GPIOx, keypad->drivers[i].GPIO_Pin, RESET);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	4413      	add	r3, r2
 8000c28:	889b      	ldrh	r3, [r3, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f001 f947 	bl	8001ec0 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	dd9e      	ble.n	8000b7c <myKeyPad_Read+0x14>
	}
	return;
 8000c3e:	bf00      	nop
}
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a4e      	ldr	r2, [pc, #312]	@ (8000de8 <HAL_ETH_MspInit+0x158>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	f040 8096 	bne.w	8000de0 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000cba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cc8:	623b      	str	r3, [r7, #32]
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	4b47      	ldr	r3, [pc, #284]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd0:	4a46      	ldr	r2, [pc, #280]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000cd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd8:	4b44      	ldr	r3, [pc, #272]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	4b41      	ldr	r3, [pc, #260]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce8:	4a40      	ldr	r2, [pc, #256]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000cea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d00:	4a3a      	ldr	r2, [pc, #232]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d08:	4b38      	ldr	r3, [pc, #224]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b35      	ldr	r3, [pc, #212]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d18:	4a34      	ldr	r2, [pc, #208]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d20:	4b32      	ldr	r3, [pc, #200]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d30:	4a2e      	ldr	r2, [pc, #184]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d38:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d44:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d48:	4a28      	ldr	r2, [pc, #160]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d50:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <HAL_ETH_MspInit+0x15c>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d5c:	2332      	movs	r3, #50	@ 0x32
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6c:	230b      	movs	r3, #11
 8000d6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	481e      	ldr	r0, [pc, #120]	@ (8000df0 <HAL_ETH_MspInit+0x160>)
 8000d78:	f000 fede 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d7c:	2386      	movs	r3, #134	@ 0x86
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <HAL_ETH_MspInit+0x164>)
 8000d98:	f000 fece 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dae:	230b      	movs	r3, #11
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	480f      	ldr	r0, [pc, #60]	@ (8000df8 <HAL_ETH_MspInit+0x168>)
 8000dba:	f000 febd 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dbe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd0:	230b      	movs	r3, #11
 8000dd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4808      	ldr	r0, [pc, #32]	@ (8000dfc <HAL_ETH_MspInit+0x16c>)
 8000ddc:	f000 feac 	bl	8001b38 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000de0:	bf00      	nop
 8000de2:	3738      	adds	r7, #56	@ 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40028000 	.word	0x40028000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020800 	.word	0x40020800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40021800 	.word	0x40021800

08000e00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0ae      	sub	sp, #184	@ 0xb8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2290      	movs	r2, #144	@ 0x90
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f003 fd55 	bl	80048d0 <memset>
  if(huart->Instance==USART3)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a22      	ldr	r2, [pc, #136]	@ (8000eb4 <HAL_UART_MspInit+0xb4>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d13c      	bne.n	8000eaa <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fec6 	bl	8002bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e4a:	f7ff fe5d 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <HAL_UART_MspInit+0xb8>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	4a19      	ldr	r2, [pc, #100]	@ (8000eb8 <HAL_UART_MspInit+0xb8>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <HAL_UART_MspInit+0xb8>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_UART_MspInit+0xb8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a13      	ldr	r2, [pc, #76]	@ (8000eb8 <HAL_UART_MspInit+0xb8>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <HAL_UART_MspInit+0xb8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <HAL_UART_MspInit+0xbc>)
 8000ea6:	f000 fe47 	bl	8001b38 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000eaa:	bf00      	nop
 8000eac:	37b8      	adds	r7, #184	@ 0xb8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40004800 	.word	0x40004800
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020c00 	.word	0x40020c00

08000ec0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0ae      	sub	sp, #184	@ 0xb8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2290      	movs	r2, #144	@ 0x90
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fcf5 	bl	80048d0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eee:	d159      	bne.n	8000fa4 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ef0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ef4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 fe65 	bl	8002bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f0c:	f7ff fdfc 	bl	8000b08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b26      	ldr	r3, [pc, #152]	@ (8000fac <HAL_PCD_MspInit+0xec>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	4a25      	ldr	r2, [pc, #148]	@ (8000fac <HAL_PCD_MspInit+0xec>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1c:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <HAL_PCD_MspInit+0xec>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f28:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f42:	230a      	movs	r3, #10
 8000f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4818      	ldr	r0, [pc, #96]	@ (8000fb0 <HAL_PCD_MspInit+0xf0>)
 8000f50:	f000 fdf2 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4810      	ldr	r0, [pc, #64]	@ (8000fb0 <HAL_PCD_MspInit+0xf0>)
 8000f70:	f000 fde2 	bl	8001b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f74:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <HAL_PCD_MspInit+0xec>)
 8000f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f78:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <HAL_PCD_MspInit+0xec>)
 8000f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f7e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f80:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_PCD_MspInit+0xec>)
 8000f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <HAL_PCD_MspInit+0xec>)
 8000f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f90:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <HAL_PCD_MspInit+0xec>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f96:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <HAL_PCD_MspInit+0xec>)
 8000f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000fa4:	bf00      	nop
 8000fa6:	37b8      	adds	r7, #184	@ 0xb8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <NMI_Handler+0x4>

08000fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100a:	f000 f91d 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}

08001012 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e00a      	b.n	800103a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001024:	f3af 8000 	nop.w
 8001028:	4601      	mov	r1, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	60ba      	str	r2, [r7, #8]
 8001030:	b2ca      	uxtb	r2, r1
 8001032:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	429a      	cmp	r2, r3
 8001040:	dbf0      	blt.n	8001024 <_read+0x12>
  }

  return len;
 8001042:	687b      	ldr	r3, [r7, #4]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e009      	b.n	8001072 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	60ba      	str	r2, [r7, #8]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fad0 	bl	800060c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	429a      	cmp	r2, r3
 8001078:	dbf1      	blt.n	800105e <_write+0x12>
  }
  return len;
 800107a:	687b      	ldr	r3, [r7, #4]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_close>:

int _close(int file)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ac:	605a      	str	r2, [r3, #4]
  return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_isatty>:

int _isatty(int file)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c4:	2301      	movs	r3, #1
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b085      	sub	sp, #20
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	@ (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f003 fc26 	bl	800496c <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20080000 	.word	0x20080000
 800114c:	00000400 	.word	0x00000400
 8001150:	2000081c 	.word	0x2000081c
 8001154:	20000970 	.word	0x20000970

08001158 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800117c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001180:	f7ff ffea 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001184:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001186:	490d      	ldr	r1, [pc, #52]	@ (80011bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001188:	4a0d      	ldr	r2, [pc, #52]	@ (80011c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800119c:	4c0a      	ldr	r4, [pc, #40]	@ (80011c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011aa:	f003 fbe5 	bl	8004978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ae:	f7ff fa3f 	bl	8000630 <main>
  bx  lr    
 80011b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011c0:	0800549c 	.word	0x0800549c
  ldr r2, =_sbss
 80011c4:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 80011c8:	20000970 	.word	0x20000970

080011cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC_IRQHandler>

080011ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d2:	2003      	movs	r0, #3
 80011d4:	f000 f92e 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f805 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011de:	f7ff fd33 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f93b 	bl	8001482 <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f911 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	20000008 	.word	0x20000008
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008
 800126c:	20000820 	.word	0x20000820

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000820 	.word	0x20000820

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	05fa0000 	.word	0x05fa0000

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	@ (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	@ (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff47 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff5c 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffb0 	bl	80013f0 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e086      	b.n	80015bc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d106      	bne.n	80014c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2220      	movs	r2, #32
 80014bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fbe5 	bl	8000c90 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b3f      	ldr	r3, [pc, #252]	@ (80015c4 <HAL_ETH_Init+0x128>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a3e      	ldr	r2, [pc, #248]	@ (80015c4 <HAL_ETH_Init+0x128>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b3c      	ldr	r3, [pc, #240]	@ (80015c4 <HAL_ETH_Init+0x128>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014de:	4b3a      	ldr	r3, [pc, #232]	@ (80015c8 <HAL_ETH_Init+0x12c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a39      	ldr	r2, [pc, #228]	@ (80015c8 <HAL_ETH_Init+0x12c>)
 80014e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80014e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014ea:	4b37      	ldr	r3, [pc, #220]	@ (80015c8 <HAL_ETH_Init+0x12c>)
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	4935      	ldr	r1, [pc, #212]	@ (80015c8 <HAL_ETH_Init+0x12c>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014f8:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <HAL_ETH_Init+0x12c>)
 80014fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001512:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001514:	f7ff feac 	bl	8001270 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800151a:	e011      	b.n	8001540 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800151c:	f7ff fea8 	bl	8001270 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800152a:	d909      	bls.n	8001540 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2204      	movs	r2, #4
 8001530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	22e0      	movs	r2, #224	@ 0xe0
 8001538:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e03d      	b.n	80015bc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1e4      	bne.n	800151c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f97a 	bl	800184c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fa25 	bl	80019a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fa7b 	bl	8001a5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	461a      	mov	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f9e3 	bl	8001938 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_ETH_Init+0x130>)
 8001590:	430b      	orrs	r3, r1
 8001592:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80015a6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2210      	movs	r2, #16
 80015b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40013800 	.word	0x40013800
 80015cc:	00020060 	.word	0x00020060

080015d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4b53      	ldr	r3, [pc, #332]	@ (8001734 <ETH_SetMACConfig+0x164>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	7b9b      	ldrb	r3, [r3, #14]
 80015ee:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	7c12      	ldrb	r2, [r2, #16]
 80015f4:	2a00      	cmp	r2, #0
 80015f6:	d102      	bne.n	80015fe <ETH_SetMACConfig+0x2e>
 80015f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015fc:	e000      	b.n	8001600 <ETH_SetMACConfig+0x30>
 80015fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001600:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	7c52      	ldrb	r2, [r2, #17]
 8001606:	2a00      	cmp	r2, #0
 8001608:	d102      	bne.n	8001610 <ETH_SetMACConfig+0x40>
 800160a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800160e:	e000      	b.n	8001612 <ETH_SetMACConfig+0x42>
 8001610:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001612:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001618:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	7fdb      	ldrb	r3, [r3, #31]
 800161e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001620:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001626:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	7f92      	ldrb	r2, [r2, #30]
 800162c:	2a00      	cmp	r2, #0
 800162e:	d102      	bne.n	8001636 <ETH_SetMACConfig+0x66>
 8001630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001634:	e000      	b.n	8001638 <ETH_SetMACConfig+0x68>
 8001636:	2200      	movs	r2, #0
                        macconf->Speed |
 8001638:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	7f1b      	ldrb	r3, [r3, #28]
 800163e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001640:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001646:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	791b      	ldrb	r3, [r3, #4]
 800164c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800164e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001656:	2a00      	cmp	r2, #0
 8001658:	d102      	bne.n	8001660 <ETH_SetMACConfig+0x90>
 800165a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800165e:	e000      	b.n	8001662 <ETH_SetMACConfig+0x92>
 8001660:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001662:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	7bdb      	ldrb	r3, [r3, #15]
 8001668:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800166a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001670:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001678:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800167a:	4313      	orrs	r3, r2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff fdf8 	bl	8001288 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80016ae:	4013      	ands	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80016be:	2a00      	cmp	r2, #0
 80016c0:	d101      	bne.n	80016c6 <ETH_SetMACConfig+0xf6>
 80016c2:	2280      	movs	r2, #128	@ 0x80
 80016c4:	e000      	b.n	80016c8 <ETH_SetMACConfig+0xf8>
 80016c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80016d6:	2a01      	cmp	r2, #1
 80016d8:	d101      	bne.n	80016de <ETH_SetMACConfig+0x10e>
 80016da:	2208      	movs	r2, #8
 80016dc:	e000      	b.n	80016e0 <ETH_SetMACConfig+0x110>
 80016de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80016e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80016e8:	2a01      	cmp	r2, #1
 80016ea:	d101      	bne.n	80016f0 <ETH_SetMACConfig+0x120>
 80016ec:	2204      	movs	r2, #4
 80016ee:	e000      	b.n	80016f2 <ETH_SetMACConfig+0x122>
 80016f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80016fa:	2a01      	cmp	r2, #1
 80016fc:	d101      	bne.n	8001702 <ETH_SetMACConfig+0x132>
 80016fe:	2202      	movs	r2, #2
 8001700:	e000      	b.n	8001704 <ETH_SetMACConfig+0x134>
 8001702:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001704:	4313      	orrs	r3, r2
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff fdb3 	bl	8001288 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	619a      	str	r2, [r3, #24]
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	fd20810f 	.word	0xfd20810f

08001738 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4b3d      	ldr	r3, [pc, #244]	@ (8001848 <ETH_SetDMAConfig+0x110>)
 8001752:	4013      	ands	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	7b1b      	ldrb	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <ETH_SetDMAConfig+0x2c>
 800175e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001762:	e000      	b.n	8001766 <ETH_SetDMAConfig+0x2e>
 8001764:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	7b5b      	ldrb	r3, [r3, #13]
 800176a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800176c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	7f52      	ldrb	r2, [r2, #29]
 8001772:	2a00      	cmp	r2, #0
 8001774:	d102      	bne.n	800177c <ETH_SetDMAConfig+0x44>
 8001776:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800177a:	e000      	b.n	800177e <ETH_SetDMAConfig+0x46>
 800177c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800177e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	7b9b      	ldrb	r3, [r3, #14]
 8001784:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001786:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800178c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	7f1b      	ldrb	r3, [r3, #28]
 8001792:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001794:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	7f9b      	ldrb	r3, [r3, #30]
 800179a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800179c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80017a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017ac:	4313      	orrs	r3, r2
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017bc:	461a      	mov	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f7ff fd5a 	bl	8001288 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017dc:	461a      	mov	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	791b      	ldrb	r3, [r3, #4]
 80017e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80017f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001800:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001802:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001808:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800180a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001810:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800181a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800181e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff fd2b 	bl	8001288 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	f8de3f23 	.word	0xf8de3f23

0800184c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0a6      	sub	sp, #152	@ 0x98
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001854:	2301      	movs	r3, #1
 8001856:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001860:	2300      	movs	r3, #0
 8001862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800186a:	2301      	movs	r3, #1
 800186c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001876:	2301      	movs	r3, #1
 8001878:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800187c:	2301      	movs	r3, #1
 800187e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800188e:	2300      	movs	r3, #0
 8001890:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001898:	2300      	movs	r3, #0
 800189a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018ca:	4619      	mov	r1, r3
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fe7f 	bl	80015d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018d2:	2301      	movs	r3, #1
 80018d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018fe:	2301      	movs	r3, #1
 8001900:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001902:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001906:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001908:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800190c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800190e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001912:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001914:	2301      	movs	r3, #1
 8001916:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800191a:	2300      	movs	r3, #0
 800191c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	4619      	mov	r1, r3
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff05 	bl	8001738 <ETH_SetDMAConfig>
}
 800192e:	bf00      	nop
 8001930:	3798      	adds	r7, #152	@ 0x98
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3305      	adds	r3, #5
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	3204      	adds	r2, #4
 8001950:	7812      	ldrb	r2, [r2, #0]
 8001952:	4313      	orrs	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <ETH_MACAddressConfig+0x68>)
 800195a:	4413      	add	r3, r2
 800195c:	461a      	mov	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3303      	adds	r3, #3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	061a      	lsls	r2, r3, #24
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3302      	adds	r3, #2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3301      	adds	r3, #1
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	4313      	orrs	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <ETH_MACAddressConfig+0x6c>)
 800198a:	4413      	add	r3, r2
 800198c:	461a      	mov	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	6013      	str	r3, [r2, #0]
}
 8001992:	bf00      	nop
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40028040 	.word	0x40028040
 80019a4:	40028044 	.word	0x40028044

080019a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e03e      	b.n	8001a34 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68d9      	ldr	r1, [r3, #12]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	3206      	adds	r2, #6
 80019e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d80c      	bhi.n	8001a18 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68d9      	ldr	r1, [r3, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	461a      	mov	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	e004      	b.n	8001a22 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3301      	adds	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d9bd      	bls.n	80019b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a4c:	611a      	str	r2, [r3, #16]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e048      	b.n	8001afa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6919      	ldr	r1, [r3, #16]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001aa4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	3212      	adds	r2, #18
 8001ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d80c      	bhi.n	8001aea <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6919      	ldr	r1, [r3, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	e004      	b.n	8001af4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d9b3      	bls.n	8001a68 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b2a:	60da      	str	r2, [r3, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e175      	b.n	8001e44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 8164 	bne.w	8001e3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d005      	beq.n	8001b8e <HAL_GPIO_Init+0x56>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d130      	bne.n	8001bf0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0201 	and.w	r2, r3, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d017      	beq.n	8001c2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d123      	bne.n	8001c80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80be 	beq.w	8001e3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b66      	ldr	r3, [pc, #408]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	4a65      	ldr	r2, [pc, #404]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cce:	4b63      	ldr	r3, [pc, #396]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cda:	4a61      	ldr	r2, [pc, #388]	@ (8001e60 <HAL_GPIO_Init+0x328>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a58      	ldr	r2, [pc, #352]	@ (8001e64 <HAL_GPIO_Init+0x32c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d037      	beq.n	8001d76 <HAL_GPIO_Init+0x23e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a57      	ldr	r2, [pc, #348]	@ (8001e68 <HAL_GPIO_Init+0x330>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d031      	beq.n	8001d72 <HAL_GPIO_Init+0x23a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a56      	ldr	r2, [pc, #344]	@ (8001e6c <HAL_GPIO_Init+0x334>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02b      	beq.n	8001d6e <HAL_GPIO_Init+0x236>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a55      	ldr	r2, [pc, #340]	@ (8001e70 <HAL_GPIO_Init+0x338>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d025      	beq.n	8001d6a <HAL_GPIO_Init+0x232>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a54      	ldr	r2, [pc, #336]	@ (8001e74 <HAL_GPIO_Init+0x33c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <HAL_GPIO_Init+0x22e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a53      	ldr	r2, [pc, #332]	@ (8001e78 <HAL_GPIO_Init+0x340>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x22a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a52      	ldr	r2, [pc, #328]	@ (8001e7c <HAL_GPIO_Init+0x344>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x226>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a51      	ldr	r2, [pc, #324]	@ (8001e80 <HAL_GPIO_Init+0x348>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x222>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a50      	ldr	r2, [pc, #320]	@ (8001e84 <HAL_GPIO_Init+0x34c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x21e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4f      	ldr	r2, [pc, #316]	@ (8001e88 <HAL_GPIO_Init+0x350>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x21a>
 8001d4e:	2309      	movs	r3, #9
 8001d50:	e012      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d52:	230a      	movs	r3, #10
 8001d54:	e010      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d56:	2308      	movs	r3, #8
 8001d58:	e00e      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	e00c      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d5e:	2306      	movs	r3, #6
 8001d60:	e00a      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d62:	2305      	movs	r3, #5
 8001d64:	e008      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d76:	2300      	movs	r3, #0
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	f002 0203 	and.w	r2, r2, #3
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	4093      	lsls	r3, r2
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d88:	4935      	ldr	r1, [pc, #212]	@ (8001e60 <HAL_GPIO_Init+0x328>)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d96:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <HAL_GPIO_Init+0x354>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dba:	4a34      	ldr	r2, [pc, #208]	@ (8001e8c <HAL_GPIO_Init+0x354>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc0:	4b32      	ldr	r3, [pc, #200]	@ (8001e8c <HAL_GPIO_Init+0x354>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de4:	4a29      	ldr	r2, [pc, #164]	@ (8001e8c <HAL_GPIO_Init+0x354>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dea:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <HAL_GPIO_Init+0x354>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e8c <HAL_GPIO_Init+0x354>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_GPIO_Init+0x354>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <HAL_GPIO_Init+0x354>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3301      	adds	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b0f      	cmp	r3, #15
 8001e48:	f67f ae86 	bls.w	8001b58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40013800 	.word	0x40013800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020c00 	.word	0x40020c00
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40021400 	.word	0x40021400
 8001e7c:	40021800 	.word	0x40021800
 8001e80:	40021c00 	.word	0x40021c00
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40022400 	.word	0x40022400
 8001e8c:	40013c00 	.word	0x40013c00

08001e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	e001      	b.n	8001eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001edc:	e003      	b.n	8001ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	619a      	str	r2, [r3, #24]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af02      	add	r7, sp, #8
 8001ef8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e108      	b.n	8002116 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe ffce 	bl	8000ec0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2203      	movs	r2, #3
 8001f28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f32:	d102      	bne.n	8001f3a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 f820 	bl	8003f84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7c1a      	ldrb	r2, [r3, #16]
 8001f4c:	f88d 2000 	strb.w	r2, [sp]
 8001f50:	3304      	adds	r3, #4
 8001f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f54:	f001 ffbc 	bl	8003ed0 <USB_CoreInit>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0d5      	b.n	8002116 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 f818 	bl	8003fa6 <USB_SetCurrentMode>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0c6      	b.n	8002116 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	e04a      	b.n	8002024 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3315      	adds	r3, #21
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	3314      	adds	r3, #20
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	b298      	uxth	r0, r3
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	332e      	adds	r3, #46	@ 0x2e
 8001fca:	4602      	mov	r2, r0
 8001fcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3318      	adds	r3, #24
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	331c      	adds	r3, #28
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3320      	adds	r3, #32
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3324      	adds	r3, #36	@ 0x24
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	3301      	adds	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	791b      	ldrb	r3, [r3, #4]
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	429a      	cmp	r2, r3
 800202c:	d3af      	bcc.n	8001f8e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e044      	b.n	80020be <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	3301      	adds	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	791b      	ldrb	r3, [r3, #4]
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3b5      	bcc.n	8002034 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7c1a      	ldrb	r2, [r3, #16]
 80020d0:	f88d 2000 	strb.w	r2, [sp]
 80020d4:	3304      	adds	r3, #4
 80020d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d8:	f001 ffb2 	bl	8004040 <USB_DevInit>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e013      	b.n	8002116 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7b1b      	ldrb	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d102      	bne.n	800210a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f80b 	bl	8002120 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f002 f96d 	bl	80043ee <USB_DevDisconnect>

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800214e:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_PCDEx_ActivateLPM+0x44>)
 8002150:	4313      	orrs	r3, r2
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	10000003 	.word	0x10000003

08002168 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40007000 	.word	0x40007000

08002188 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <HAL_PWREx_EnableOverDrive+0x98>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	4a22      	ldr	r2, [pc, #136]	@ (8002220 <HAL_PWREx_EnableOverDrive+0x98>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	@ 0x40
 800219e:	4b20      	ldr	r3, [pc, #128]	@ (8002220 <HAL_PWREx_EnableOverDrive+0x98>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b6:	f7ff f85b 	bl	8001270 <HAL_GetTick>
 80021ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021bc:	e009      	b.n	80021d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021be:	f7ff f857 	bl	8001270 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021cc:	d901      	bls.n	80021d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e022      	b.n	8002218 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021d2:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021de:	d1ee      	bne.n	80021be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021e0:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ec:	f7ff f840 	bl	8001270 <HAL_GetTick>
 80021f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021f2:	e009      	b.n	8002208 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021f4:	f7ff f83c 	bl	8001270 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002202:	d901      	bls.n	8002208 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e007      	b.n	8002218 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002214:	d1ee      	bne.n	80021f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000

08002228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e29b      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8087 	beq.w	800235a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800224c:	4b96      	ldr	r3, [pc, #600]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b04      	cmp	r3, #4
 8002256:	d00c      	beq.n	8002272 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002258:	4b93      	ldr	r3, [pc, #588]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d112      	bne.n	800228a <HAL_RCC_OscConfig+0x62>
 8002264:	4b90      	ldr	r3, [pc, #576]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002270:	d10b      	bne.n	800228a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002272:	4b8d      	ldr	r3, [pc, #564]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d06c      	beq.n	8002358 <HAL_RCC_OscConfig+0x130>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d168      	bne.n	8002358 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e275      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x7a>
 8002294:	4b84      	ldr	r3, [pc, #528]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a83      	ldr	r2, [pc, #524]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e02e      	b.n	8002300 <HAL_RCC_OscConfig+0xd8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x9c>
 80022aa:	4b7f      	ldr	r3, [pc, #508]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7e      	ldr	r2, [pc, #504]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b7c      	ldr	r3, [pc, #496]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7b      	ldr	r2, [pc, #492]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e01d      	b.n	8002300 <HAL_RCC_OscConfig+0xd8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0xc0>
 80022ce:	4b76      	ldr	r3, [pc, #472]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a75      	ldr	r2, [pc, #468]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b73      	ldr	r3, [pc, #460]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a72      	ldr	r2, [pc, #456]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0xd8>
 80022e8:	4b6f      	ldr	r3, [pc, #444]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6e      	ldr	r2, [pc, #440]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b6c      	ldr	r3, [pc, #432]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a6b      	ldr	r2, [pc, #428]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80022fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe ffb2 	bl	8001270 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe ffae 	bl	8001270 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	@ 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e229      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b61      	ldr	r3, [pc, #388]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0xe8>
 800232e:	e014      	b.n	800235a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe ff9e 	bl	8001270 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7fe ff9a 	bl	8001270 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	@ 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e215      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	4b57      	ldr	r3, [pc, #348]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x110>
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d069      	beq.n	800243a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002366:	4b50      	ldr	r3, [pc, #320]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002372:	4b4d      	ldr	r3, [pc, #308]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b08      	cmp	r3, #8
 800237c:	d11c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x190>
 800237e:	4b4a      	ldr	r3, [pc, #296]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x17a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e1e9      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b41      	ldr	r3, [pc, #260]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	493d      	ldr	r1, [pc, #244]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	e040      	b.n	800243a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d023      	beq.n	8002408 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c0:	4b39      	ldr	r3, [pc, #228]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a38      	ldr	r2, [pc, #224]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe ff50 	bl	8001270 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d4:	f7fe ff4c 	bl	8001270 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1c7      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b30      	ldr	r3, [pc, #192]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b2d      	ldr	r3, [pc, #180]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4929      	ldr	r1, [pc, #164]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
 8002406:	e018      	b.n	800243a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002408:	4b27      	ldr	r3, [pc, #156]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a26      	ldr	r2, [pc, #152]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe ff2c 	bl	8001270 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241c:	f7fe ff28 	bl	8001270 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1a3      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d038      	beq.n	80024b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d019      	beq.n	8002482 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244e:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002452:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe ff09 	bl	8001270 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002462:	f7fe ff05 	bl	8001270 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e180      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x23a>
 8002480:	e01a      	b.n	80024b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002482:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002486:	4a08      	ldr	r2, [pc, #32]	@ (80024a8 <HAL_RCC_OscConfig+0x280>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248e:	f7fe feef 	bl	8001270 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002496:	f7fe feeb 	bl	8001270 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d903      	bls.n	80024ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e166      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
 80024a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ac:	4b92      	ldr	r3, [pc, #584]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80024ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a4 	beq.w	800260e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b8c      	ldr	r3, [pc, #560]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10d      	bne.n	80024ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	4b89      	ldr	r3, [pc, #548]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	4a88      	ldr	r2, [pc, #544]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024de:	4b86      	ldr	r3, [pc, #536]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ee:	4b83      	ldr	r3, [pc, #524]	@ (80026fc <HAL_RCC_OscConfig+0x4d4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024fa:	4b80      	ldr	r3, [pc, #512]	@ (80026fc <HAL_RCC_OscConfig+0x4d4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7f      	ldr	r2, [pc, #508]	@ (80026fc <HAL_RCC_OscConfig+0x4d4>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7fe feb3 	bl	8001270 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe feaf 	bl	8001270 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b64      	cmp	r3, #100	@ 0x64
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e12a      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002520:	4b76      	ldr	r3, [pc, #472]	@ (80026fc <HAL_RCC_OscConfig+0x4d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x31a>
 8002534:	4b70      	ldr	r3, [pc, #448]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	4a6f      	ldr	r2, [pc, #444]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002540:	e02d      	b.n	800259e <HAL_RCC_OscConfig+0x376>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x33c>
 800254a:	4b6b      	ldr	r3, [pc, #428]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	4a6a      	ldr	r2, [pc, #424]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6713      	str	r3, [r2, #112]	@ 0x70
 8002556:	4b68      	ldr	r3, [pc, #416]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255a:	4a67      	ldr	r2, [pc, #412]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	6713      	str	r3, [r2, #112]	@ 0x70
 8002562:	e01c      	b.n	800259e <HAL_RCC_OscConfig+0x376>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b05      	cmp	r3, #5
 800256a:	d10c      	bne.n	8002586 <HAL_RCC_OscConfig+0x35e>
 800256c:	4b62      	ldr	r3, [pc, #392]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002570:	4a61      	ldr	r2, [pc, #388]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	6713      	str	r3, [r2, #112]	@ 0x70
 8002578:	4b5f      	ldr	r3, [pc, #380]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257c:	4a5e      	ldr	r2, [pc, #376]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6713      	str	r3, [r2, #112]	@ 0x70
 8002584:	e00b      	b.n	800259e <HAL_RCC_OscConfig+0x376>
 8002586:	4b5c      	ldr	r3, [pc, #368]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258a:	4a5b      	ldr	r2, [pc, #364]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6713      	str	r3, [r2, #112]	@ 0x70
 8002592:	4b59      	ldr	r3, [pc, #356]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002596:	4a58      	ldr	r2, [pc, #352]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d015      	beq.n	80025d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fe63 	bl	8001270 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe fe5f 	bl	8001270 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0d8      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	4b4c      	ldr	r3, [pc, #304]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ee      	beq.n	80025ae <HAL_RCC_OscConfig+0x386>
 80025d0:	e014      	b.n	80025fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7fe fe4d 	bl	8001270 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fe49 	bl	8001270 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0c2      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	4b41      	ldr	r3, [pc, #260]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ee      	bne.n	80025da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d105      	bne.n	800260e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002602:	4b3d      	ldr	r3, [pc, #244]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	4a3c      	ldr	r2, [pc, #240]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80ae 	beq.w	8002774 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002618:	4b37      	ldr	r3, [pc, #220]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d06d      	beq.n	8002700 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d14b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262c:	4b32      	ldr	r3, [pc, #200]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a31      	ldr	r2, [pc, #196]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fe1a 	bl	8001270 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe fe16 	bl	8001270 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e091      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002652:	4b29      	ldr	r3, [pc, #164]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	019b      	lsls	r3, r3, #6
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	3b01      	subs	r3, #1
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002688:	071b      	lsls	r3, r3, #28
 800268a:	491b      	ldr	r1, [pc, #108]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a18      	ldr	r2, [pc, #96]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 8002696:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800269a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fde8 	bl	8001270 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe fde4 	bl	8001270 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e05f      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x47c>
 80026c2:	e057      	b.n	8002774 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0b      	ldr	r2, [pc, #44]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80026ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fdce 	bl	8001270 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fdca 	bl	8001270 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e045      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ea:	4b03      	ldr	r3, [pc, #12]	@ (80026f8 <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4b0>
 80026f6:	e03d      	b.n	8002774 <HAL_RCC_OscConfig+0x54c>
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002700:	4b1f      	ldr	r3, [pc, #124]	@ (8002780 <HAL_RCC_OscConfig+0x558>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d030      	beq.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d129      	bne.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	429a      	cmp	r2, r3
 8002728:	d122      	bne.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002730:	4013      	ands	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002736:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002738:	4293      	cmp	r3, r2
 800273a:	d119      	bne.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	3b01      	subs	r3, #1
 800274a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d10f      	bne.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d107      	bne.n	8002770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800

08002784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0d0      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b6a      	ldr	r3, [pc, #424]	@ (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d910      	bls.n	80027cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b67      	ldr	r3, [pc, #412]	@ (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 020f 	bic.w	r2, r3, #15
 80027b2:	4965      	ldr	r1, [pc, #404]	@ (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b63      	ldr	r3, [pc, #396]	@ (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0b8      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e4:	4b59      	ldr	r3, [pc, #356]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a58      	ldr	r2, [pc, #352]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 80027ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027fc:	4b53      	ldr	r3, [pc, #332]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a52      	ldr	r2, [pc, #328]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002806:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b50      	ldr	r3, [pc, #320]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	494d      	ldr	r1, [pc, #308]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d040      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b47      	ldr	r3, [pc, #284]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d115      	bne.n	8002866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07f      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b41      	ldr	r3, [pc, #260]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e073      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3d      	ldr	r3, [pc, #244]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e06b      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b39      	ldr	r3, [pc, #228]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4936      	ldr	r1, [pc, #216]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe fcfa 	bl	8001270 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7fe fcf6 	bl	8001270 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e053      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2d      	ldr	r3, [pc, #180]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d210      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 020f 	bic.w	r2, r3, #15
 80028be:	4922      	ldr	r1, [pc, #136]	@ (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e032      	b.n	800293e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b19      	ldr	r3, [pc, #100]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4916      	ldr	r1, [pc, #88]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002902:	4b12      	ldr	r3, [pc, #72]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	490e      	ldr	r1, [pc, #56]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002916:	f000 f821 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800291a:	4602      	mov	r2, r0
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	490a      	ldr	r1, [pc, #40]	@ (8002950 <HAL_RCC_ClockConfig+0x1cc>)
 8002928:	5ccb      	ldrb	r3, [r1, r3]
 800292a:	fa22 f303 	lsr.w	r3, r2, r3
 800292e:	4a09      	ldr	r2, [pc, #36]	@ (8002954 <HAL_RCC_ClockConfig+0x1d0>)
 8002930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002932:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <HAL_RCC_ClockConfig+0x1d4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fc56 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00
 800294c:	40023800 	.word	0x40023800
 8002950:	08005440 	.word	0x08005440
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002960:	b094      	sub	sp, #80	@ 0x50
 8002962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	647b      	str	r3, [r7, #68]	@ 0x44
 8002968:	2300      	movs	r3, #0
 800296a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800296c:	2300      	movs	r3, #0
 800296e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002974:	4b79      	ldr	r3, [pc, #484]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b08      	cmp	r3, #8
 800297e:	d00d      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x40>
 8002980:	2b08      	cmp	r3, #8
 8002982:	f200 80e1 	bhi.w	8002b48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x34>
 800298a:	2b04      	cmp	r3, #4
 800298c:	d003      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x3a>
 800298e:	e0db      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002990:	4b73      	ldr	r3, [pc, #460]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002992:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002994:	e0db      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002996:	4b73      	ldr	r3, [pc, #460]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x208>)
 8002998:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800299a:	e0d8      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800299c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x200>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029a6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x200>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d063      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x200>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	099b      	lsrs	r3, r3, #6
 80029b8:	2200      	movs	r2, #0
 80029ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029c6:	2300      	movs	r3, #0
 80029c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029ce:	4622      	mov	r2, r4
 80029d0:	462b      	mov	r3, r5
 80029d2:	f04f 0000 	mov.w	r0, #0
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	0159      	lsls	r1, r3, #5
 80029dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e0:	0150      	lsls	r0, r2, #5
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4621      	mov	r1, r4
 80029e8:	1a51      	subs	r1, r2, r1
 80029ea:	6139      	str	r1, [r7, #16]
 80029ec:	4629      	mov	r1, r5
 80029ee:	eb63 0301 	sbc.w	r3, r3, r1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a00:	4659      	mov	r1, fp
 8002a02:	018b      	lsls	r3, r1, #6
 8002a04:	4651      	mov	r1, sl
 8002a06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	018a      	lsls	r2, r1, #6
 8002a0e:	4651      	mov	r1, sl
 8002a10:	ebb2 0801 	subs.w	r8, r2, r1
 8002a14:	4659      	mov	r1, fp
 8002a16:	eb63 0901 	sbc.w	r9, r3, r1
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a2e:	4690      	mov	r8, r2
 8002a30:	4699      	mov	r9, r3
 8002a32:	4623      	mov	r3, r4
 8002a34:	eb18 0303 	adds.w	r3, r8, r3
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	eb49 0303 	adc.w	r3, r9, r3
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a4e:	4629      	mov	r1, r5
 8002a50:	024b      	lsls	r3, r1, #9
 8002a52:	4621      	mov	r1, r4
 8002a54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a58:	4621      	mov	r1, r4
 8002a5a:	024a      	lsls	r2, r1, #9
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a62:	2200      	movs	r2, #0
 8002a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a6c:	f7fd fc38 	bl	80002e0 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4613      	mov	r3, r2
 8002a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a78:	e058      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7a:	4b38      	ldr	r3, [pc, #224]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	099b      	lsrs	r3, r3, #6
 8002a80:	2200      	movs	r2, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	4611      	mov	r1, r2
 8002a86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a8a:	623b      	str	r3, [r7, #32]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a94:	4642      	mov	r2, r8
 8002a96:	464b      	mov	r3, r9
 8002a98:	f04f 0000 	mov.w	r0, #0
 8002a9c:	f04f 0100 	mov.w	r1, #0
 8002aa0:	0159      	lsls	r1, r3, #5
 8002aa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa6:	0150      	lsls	r0, r2, #5
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4641      	mov	r1, r8
 8002aae:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ac4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ac8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002acc:	ebb2 040a 	subs.w	r4, r2, sl
 8002ad0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	00eb      	lsls	r3, r5, #3
 8002ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ae2:	00e2      	lsls	r2, r4, #3
 8002ae4:	4614      	mov	r4, r2
 8002ae6:	461d      	mov	r5, r3
 8002ae8:	4643      	mov	r3, r8
 8002aea:	18e3      	adds	r3, r4, r3
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	464b      	mov	r3, r9
 8002af0:	eb45 0303 	adc.w	r3, r5, r3
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b02:	4629      	mov	r1, r5
 8002b04:	028b      	lsls	r3, r1, #10
 8002b06:	4621      	mov	r1, r4
 8002b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	028a      	lsls	r2, r1, #10
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b16:	2200      	movs	r2, #0
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	61fa      	str	r2, [r7, #28]
 8002b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b20:	f7fd fbde 	bl	80002e0 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	3301      	adds	r3, #1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b46:	e002      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3750      	adds	r7, #80	@ 0x50
 8002b54:	46bd      	mov	sp, r7
 8002b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	00f42400 	.word	0x00f42400
 8002b64:	007a1200 	.word	0x007a1200

08002b68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b6c:	4b03      	ldr	r3, [pc, #12]	@ (8002b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000000 	.word	0x20000000

08002b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b84:	f7ff fff0 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0a9b      	lsrs	r3, r3, #10
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4903      	ldr	r1, [pc, #12]	@ (8002ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	08005450 	.word	0x08005450

08002ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bac:	f7ff ffdc 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0b5b      	lsrs	r3, r3, #13
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4903      	ldr	r1, [pc, #12]	@ (8002bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	08005450 	.word	0x08005450

08002bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d012      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bf8:	4b69      	ldr	r3, [pc, #420]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a68      	ldr	r2, [pc, #416]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c02:	6093      	str	r3, [r2, #8]
 8002c04:	4b66      	ldr	r3, [pc, #408]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0c:	4964      	ldr	r1, [pc, #400]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d017      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c30:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	4959      	ldr	r1, [pc, #356]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c48:	d101      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d017      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c66:	4b4e      	ldr	r3, [pc, #312]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c6c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	494a      	ldr	r1, [pc, #296]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c84:	d101      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 808b 	beq.w	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	4a39      	ldr	r2, [pc, #228]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc0:	4b37      	ldr	r3, [pc, #220]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ccc:	4b35      	ldr	r3, [pc, #212]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a34      	ldr	r2, [pc, #208]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd8:	f7fe faca 	bl	8001270 <HAL_GetTick>
 8002cdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce0:	f7fe fac6 	bl	8001270 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	@ 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e38f      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cfe:	4b28      	ldr	r3, [pc, #160]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d035      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d02e      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d1c:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d26:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d30:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d32:	4b1b      	ldr	r3, [pc, #108]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d36:	4a1a      	ldr	r2, [pc, #104]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d3e:	4a18      	ldr	r2, [pc, #96]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d44:	4b16      	ldr	r3, [pc, #88]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d114      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fa8e 	bl	8001270 <HAL_GetTick>
 8002d54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe fa8a 	bl	8001270 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e351      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0ee      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d86:	d111      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d88:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d94:	4b04      	ldr	r3, [pc, #16]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d96:	400b      	ands	r3, r1
 8002d98:	4901      	ldr	r1, [pc, #4]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40007000 	.word	0x40007000
 8002da8:	0ffffcff 	.word	0x0ffffcff
 8002dac:	4bac      	ldr	r3, [pc, #688]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4aab      	ldr	r2, [pc, #684]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002db6:	6093      	str	r3, [r2, #8]
 8002db8:	4ba9      	ldr	r3, [pc, #676]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc4:	49a6      	ldr	r1, [pc, #664]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d010      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dd6:	4ba2      	ldr	r3, [pc, #648]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ddc:	4aa0      	ldr	r2, [pc, #640]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002de2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002de6:	4b9e      	ldr	r3, [pc, #632]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	499b      	ldr	r1, [pc, #620]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e04:	4b96      	ldr	r3, [pc, #600]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e12:	4993      	ldr	r1, [pc, #588]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e26:	4b8e      	ldr	r3, [pc, #568]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e34:	498a      	ldr	r1, [pc, #552]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e48:	4b85      	ldr	r3, [pc, #532]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e56:	4982      	ldr	r1, [pc, #520]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e78:	4979      	ldr	r1, [pc, #484]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e8c:	4b74      	ldr	r3, [pc, #464]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	f023 0203 	bic.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	4971      	ldr	r1, [pc, #452]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eae:	4b6c      	ldr	r3, [pc, #432]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb4:	f023 020c 	bic.w	r2, r3, #12
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebc:	4968      	ldr	r1, [pc, #416]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ed0:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ede:	4960      	ldr	r1, [pc, #384]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f00:	4957      	ldr	r1, [pc, #348]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f14:	4b52      	ldr	r3, [pc, #328]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f22:	494f      	ldr	r1, [pc, #316]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f36:	4b4a      	ldr	r3, [pc, #296]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f44:	4946      	ldr	r1, [pc, #280]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f58:	4b41      	ldr	r3, [pc, #260]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f66:	493e      	ldr	r1, [pc, #248]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f7a:	4b39      	ldr	r3, [pc, #228]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f88:	4935      	ldr	r1, [pc, #212]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f9c:	4b30      	ldr	r3, [pc, #192]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002faa:	492d      	ldr	r1, [pc, #180]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d011      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fbe:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fcc:	4924      	ldr	r1, [pc, #144]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ffe:	4b18      	ldr	r3, [pc, #96]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003004:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300c:	4914      	ldr	r1, [pc, #80]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003020:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003026:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003030:	490b      	ldr	r1, [pc, #44]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00f      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003054:	4902      	ldr	r1, [pc, #8]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800305c:	e002      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003070:	4b8a      	ldr	r3, [pc, #552]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003072:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003076:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003080:	4986      	ldr	r1, [pc, #536]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003094:	4b81      	ldr	r3, [pc, #516]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800309a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a4:	497d      	ldr	r1, [pc, #500]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d006      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80d6 	beq.w	800326c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030c0:	4b76      	ldr	r3, [pc, #472]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a75      	ldr	r2, [pc, #468]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030cc:	f7fe f8d0 	bl	8001270 <HAL_GetTick>
 80030d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030d4:	f7fe f8cc 	bl	8001270 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	@ 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e195      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030e6:	4b6d      	ldr	r3, [pc, #436]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d021      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11d      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003106:	4b65      	ldr	r3, [pc, #404]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003114:	4b61      	ldr	r3, [pc, #388]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800311a:	0e1b      	lsrs	r3, r3, #24
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	019a      	lsls	r2, r3, #6
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	431a      	orrs	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	071b      	lsls	r3, r3, #28
 800313a:	4958      	ldr	r1, [pc, #352]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d004      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02e      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800316c:	d129      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800316e:	4b4b      	ldr	r3, [pc, #300]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800317c:	4b47      	ldr	r3, [pc, #284]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800317e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003182:	0f1b      	lsrs	r3, r3, #28
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	019a      	lsls	r2, r3, #6
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	061b      	lsls	r3, r3, #24
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	071b      	lsls	r3, r3, #28
 80031a2:	493e      	ldr	r1, [pc, #248]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031aa:	4b3c      	ldr	r3, [pc, #240]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031b0:	f023 021f 	bic.w	r2, r3, #31
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	3b01      	subs	r3, #1
 80031ba:	4938      	ldr	r1, [pc, #224]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01d      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031ce:	4b33      	ldr	r3, [pc, #204]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d4:	0e1b      	lsrs	r3, r3, #24
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031dc:	4b2f      	ldr	r3, [pc, #188]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e2:	0f1b      	lsrs	r3, r3, #28
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	019a      	lsls	r2, r3, #6
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	431a      	orrs	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	061b      	lsls	r3, r3, #24
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	4926      	ldr	r1, [pc, #152]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d011      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	019a      	lsls	r2, r3, #6
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	041b      	lsls	r3, r3, #16
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	071b      	lsls	r3, r3, #28
 8003232:	491a      	ldr	r1, [pc, #104]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800323a:	4b18      	ldr	r3, [pc, #96]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a17      	ldr	r2, [pc, #92]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003240:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003246:	f7fe f813 	bl	8001270 <HAL_GetTick>
 800324a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800324e:	f7fe f80f 	bl	8001270 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b64      	cmp	r3, #100	@ 0x64
 800325a:	d901      	bls.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0d8      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003260:	4b0e      	ldr	r3, [pc, #56]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b01      	cmp	r3, #1
 8003270:	f040 80ce 	bne.w	8003410 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003274:	4b09      	ldr	r3, [pc, #36]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a08      	ldr	r2, [pc, #32]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800327a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800327e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003280:	f7fd fff6 	bl	8001270 <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003286:	e00b      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003288:	f7fd fff2 	bl	8001270 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	@ 0x64
 8003294:	d904      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0bb      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032a0:	4b5e      	ldr	r3, [pc, #376]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ac:	d0ec      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d02e      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d12a      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032d6:	4b51      	ldr	r3, [pc, #324]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032e4:	4b4d      	ldr	r3, [pc, #308]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ea:	0f1b      	lsrs	r3, r3, #28
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	019a      	lsls	r2, r3, #6
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	061b      	lsls	r3, r3, #24
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	071b      	lsls	r3, r3, #28
 800330a:	4944      	ldr	r1, [pc, #272]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003312:	4b42      	ldr	r3, [pc, #264]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003318:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	3b01      	subs	r3, #1
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	493d      	ldr	r1, [pc, #244]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d022      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800333c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003340:	d11d      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003342:	4b36      	ldr	r3, [pc, #216]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003348:	0e1b      	lsrs	r3, r3, #24
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003350:	4b32      	ldr	r3, [pc, #200]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003356:	0f1b      	lsrs	r3, r3, #28
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	019a      	lsls	r2, r3, #6
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	431a      	orrs	r2, r3
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	061b      	lsls	r3, r3, #24
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	071b      	lsls	r3, r3, #28
 8003376:	4929      	ldr	r1, [pc, #164]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d028      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800338a:	4b24      	ldr	r3, [pc, #144]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003390:	0e1b      	lsrs	r3, r3, #24
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003398:	4b20      	ldr	r3, [pc, #128]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	0c1b      	lsrs	r3, r3, #16
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	019a      	lsls	r2, r3, #6
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	431a      	orrs	r2, r3
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	071b      	lsls	r3, r3, #28
 80033be:	4917      	ldr	r1, [pc, #92]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033c6:	4b15      	ldr	r3, [pc, #84]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	4911      	ldr	r1, [pc, #68]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033dc:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0e      	ldr	r2, [pc, #56]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e8:	f7fd ff42 	bl	8001270 <HAL_GetTick>
 80033ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033f0:	f7fd ff3e 	bl	8001270 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	@ 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e007      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003402:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800340a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800340e:	d1ef      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800

08003420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e040      	b.n	80034b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fcdc 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	@ 0x24
 800344c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fb16 	bl	8003a98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8af 	bl	80035d0 <UART_SetConfig>
 8003472:	4603      	mov	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e01b      	b.n	80034b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800348a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800349a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fb95 	bl	8003bdc <UART_CheckIdleState>
 80034b2:	4603      	mov	r3, r0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	@ 0x28
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d177      	bne.n	80035c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_UART_Transmit+0x24>
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e070      	b.n	80035c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2221      	movs	r2, #33	@ 0x21
 80034f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f2:	f7fd febd 	bl	8001270 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003510:	d108      	bne.n	8003524 <HAL_UART_Transmit+0x68>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e003      	b.n	800352c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800352c:	e02f      	b.n	800358e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	@ 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fbf7 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d004      	beq.n	800354e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e03b      	b.n	80035c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	3302      	adds	r3, #2
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e007      	b.n	800357c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3301      	adds	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1c9      	bne.n	800352e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	@ 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fbc1 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e005      	b.n	80035c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4ba6      	ldr	r3, [pc, #664]	@ (8003894 <UART_SetConfig+0x2c4>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	6979      	ldr	r1, [r7, #20]
 8003604:	430b      	orrs	r3, r1
 8003606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	430a      	orrs	r2, r1
 8003640:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a94      	ldr	r2, [pc, #592]	@ (8003898 <UART_SetConfig+0x2c8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d120      	bne.n	800368e <UART_SetConfig+0xbe>
 800364c:	4b93      	ldr	r3, [pc, #588]	@ (800389c <UART_SetConfig+0x2cc>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b03      	cmp	r3, #3
 8003658:	d816      	bhi.n	8003688 <UART_SetConfig+0xb8>
 800365a:	a201      	add	r2, pc, #4	@ (adr r2, 8003660 <UART_SetConfig+0x90>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	08003671 	.word	0x08003671
 8003664:	0800367d 	.word	0x0800367d
 8003668:	08003677 	.word	0x08003677
 800366c:	08003683 	.word	0x08003683
 8003670:	2301      	movs	r3, #1
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e150      	b.n	8003918 <UART_SetConfig+0x348>
 8003676:	2302      	movs	r3, #2
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e14d      	b.n	8003918 <UART_SetConfig+0x348>
 800367c:	2304      	movs	r3, #4
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e14a      	b.n	8003918 <UART_SetConfig+0x348>
 8003682:	2308      	movs	r3, #8
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e147      	b.n	8003918 <UART_SetConfig+0x348>
 8003688:	2310      	movs	r3, #16
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e144      	b.n	8003918 <UART_SetConfig+0x348>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a83      	ldr	r2, [pc, #524]	@ (80038a0 <UART_SetConfig+0x2d0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d132      	bne.n	80036fe <UART_SetConfig+0x12e>
 8003698:	4b80      	ldr	r3, [pc, #512]	@ (800389c <UART_SetConfig+0x2cc>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	d828      	bhi.n	80036f8 <UART_SetConfig+0x128>
 80036a6:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <UART_SetConfig+0xdc>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036e1 	.word	0x080036e1
 80036b0:	080036f9 	.word	0x080036f9
 80036b4:	080036f9 	.word	0x080036f9
 80036b8:	080036f9 	.word	0x080036f9
 80036bc:	080036ed 	.word	0x080036ed
 80036c0:	080036f9 	.word	0x080036f9
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	080036e7 	.word	0x080036e7
 80036d0:	080036f9 	.word	0x080036f9
 80036d4:	080036f9 	.word	0x080036f9
 80036d8:	080036f9 	.word	0x080036f9
 80036dc:	080036f3 	.word	0x080036f3
 80036e0:	2300      	movs	r3, #0
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e118      	b.n	8003918 <UART_SetConfig+0x348>
 80036e6:	2302      	movs	r3, #2
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e115      	b.n	8003918 <UART_SetConfig+0x348>
 80036ec:	2304      	movs	r3, #4
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e112      	b.n	8003918 <UART_SetConfig+0x348>
 80036f2:	2308      	movs	r3, #8
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e10f      	b.n	8003918 <UART_SetConfig+0x348>
 80036f8:	2310      	movs	r3, #16
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e10c      	b.n	8003918 <UART_SetConfig+0x348>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a68      	ldr	r2, [pc, #416]	@ (80038a4 <UART_SetConfig+0x2d4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d120      	bne.n	800374a <UART_SetConfig+0x17a>
 8003708:	4b64      	ldr	r3, [pc, #400]	@ (800389c <UART_SetConfig+0x2cc>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003712:	2b30      	cmp	r3, #48	@ 0x30
 8003714:	d013      	beq.n	800373e <UART_SetConfig+0x16e>
 8003716:	2b30      	cmp	r3, #48	@ 0x30
 8003718:	d814      	bhi.n	8003744 <UART_SetConfig+0x174>
 800371a:	2b20      	cmp	r3, #32
 800371c:	d009      	beq.n	8003732 <UART_SetConfig+0x162>
 800371e:	2b20      	cmp	r3, #32
 8003720:	d810      	bhi.n	8003744 <UART_SetConfig+0x174>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <UART_SetConfig+0x15c>
 8003726:	2b10      	cmp	r3, #16
 8003728:	d006      	beq.n	8003738 <UART_SetConfig+0x168>
 800372a:	e00b      	b.n	8003744 <UART_SetConfig+0x174>
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e0f2      	b.n	8003918 <UART_SetConfig+0x348>
 8003732:	2302      	movs	r3, #2
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e0ef      	b.n	8003918 <UART_SetConfig+0x348>
 8003738:	2304      	movs	r3, #4
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e0ec      	b.n	8003918 <UART_SetConfig+0x348>
 800373e:	2308      	movs	r3, #8
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e0e9      	b.n	8003918 <UART_SetConfig+0x348>
 8003744:	2310      	movs	r3, #16
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e0e6      	b.n	8003918 <UART_SetConfig+0x348>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a56      	ldr	r2, [pc, #344]	@ (80038a8 <UART_SetConfig+0x2d8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d120      	bne.n	8003796 <UART_SetConfig+0x1c6>
 8003754:	4b51      	ldr	r3, [pc, #324]	@ (800389c <UART_SetConfig+0x2cc>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800375e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003760:	d013      	beq.n	800378a <UART_SetConfig+0x1ba>
 8003762:	2bc0      	cmp	r3, #192	@ 0xc0
 8003764:	d814      	bhi.n	8003790 <UART_SetConfig+0x1c0>
 8003766:	2b80      	cmp	r3, #128	@ 0x80
 8003768:	d009      	beq.n	800377e <UART_SetConfig+0x1ae>
 800376a:	2b80      	cmp	r3, #128	@ 0x80
 800376c:	d810      	bhi.n	8003790 <UART_SetConfig+0x1c0>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <UART_SetConfig+0x1a8>
 8003772:	2b40      	cmp	r3, #64	@ 0x40
 8003774:	d006      	beq.n	8003784 <UART_SetConfig+0x1b4>
 8003776:	e00b      	b.n	8003790 <UART_SetConfig+0x1c0>
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e0cc      	b.n	8003918 <UART_SetConfig+0x348>
 800377e:	2302      	movs	r3, #2
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e0c9      	b.n	8003918 <UART_SetConfig+0x348>
 8003784:	2304      	movs	r3, #4
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e0c6      	b.n	8003918 <UART_SetConfig+0x348>
 800378a:	2308      	movs	r3, #8
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e0c3      	b.n	8003918 <UART_SetConfig+0x348>
 8003790:	2310      	movs	r3, #16
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e0c0      	b.n	8003918 <UART_SetConfig+0x348>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a44      	ldr	r2, [pc, #272]	@ (80038ac <UART_SetConfig+0x2dc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d125      	bne.n	80037ec <UART_SetConfig+0x21c>
 80037a0:	4b3e      	ldr	r3, [pc, #248]	@ (800389c <UART_SetConfig+0x2cc>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ae:	d017      	beq.n	80037e0 <UART_SetConfig+0x210>
 80037b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037b4:	d817      	bhi.n	80037e6 <UART_SetConfig+0x216>
 80037b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ba:	d00b      	beq.n	80037d4 <UART_SetConfig+0x204>
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c0:	d811      	bhi.n	80037e6 <UART_SetConfig+0x216>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <UART_SetConfig+0x1fe>
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ca:	d006      	beq.n	80037da <UART_SetConfig+0x20a>
 80037cc:	e00b      	b.n	80037e6 <UART_SetConfig+0x216>
 80037ce:	2300      	movs	r3, #0
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e0a1      	b.n	8003918 <UART_SetConfig+0x348>
 80037d4:	2302      	movs	r3, #2
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e09e      	b.n	8003918 <UART_SetConfig+0x348>
 80037da:	2304      	movs	r3, #4
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e09b      	b.n	8003918 <UART_SetConfig+0x348>
 80037e0:	2308      	movs	r3, #8
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e098      	b.n	8003918 <UART_SetConfig+0x348>
 80037e6:	2310      	movs	r3, #16
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e095      	b.n	8003918 <UART_SetConfig+0x348>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a2f      	ldr	r2, [pc, #188]	@ (80038b0 <UART_SetConfig+0x2e0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d125      	bne.n	8003842 <UART_SetConfig+0x272>
 80037f6:	4b29      	ldr	r3, [pc, #164]	@ (800389c <UART_SetConfig+0x2cc>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003800:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003804:	d017      	beq.n	8003836 <UART_SetConfig+0x266>
 8003806:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800380a:	d817      	bhi.n	800383c <UART_SetConfig+0x26c>
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003810:	d00b      	beq.n	800382a <UART_SetConfig+0x25a>
 8003812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003816:	d811      	bhi.n	800383c <UART_SetConfig+0x26c>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <UART_SetConfig+0x254>
 800381c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003820:	d006      	beq.n	8003830 <UART_SetConfig+0x260>
 8003822:	e00b      	b.n	800383c <UART_SetConfig+0x26c>
 8003824:	2301      	movs	r3, #1
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e076      	b.n	8003918 <UART_SetConfig+0x348>
 800382a:	2302      	movs	r3, #2
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e073      	b.n	8003918 <UART_SetConfig+0x348>
 8003830:	2304      	movs	r3, #4
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e070      	b.n	8003918 <UART_SetConfig+0x348>
 8003836:	2308      	movs	r3, #8
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e06d      	b.n	8003918 <UART_SetConfig+0x348>
 800383c:	2310      	movs	r3, #16
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e06a      	b.n	8003918 <UART_SetConfig+0x348>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1b      	ldr	r2, [pc, #108]	@ (80038b4 <UART_SetConfig+0x2e4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d138      	bne.n	80038be <UART_SetConfig+0x2ee>
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <UART_SetConfig+0x2cc>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003856:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800385a:	d017      	beq.n	800388c <UART_SetConfig+0x2bc>
 800385c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003860:	d82a      	bhi.n	80038b8 <UART_SetConfig+0x2e8>
 8003862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003866:	d00b      	beq.n	8003880 <UART_SetConfig+0x2b0>
 8003868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386c:	d824      	bhi.n	80038b8 <UART_SetConfig+0x2e8>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <UART_SetConfig+0x2aa>
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003876:	d006      	beq.n	8003886 <UART_SetConfig+0x2b6>
 8003878:	e01e      	b.n	80038b8 <UART_SetConfig+0x2e8>
 800387a:	2300      	movs	r3, #0
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e04b      	b.n	8003918 <UART_SetConfig+0x348>
 8003880:	2302      	movs	r3, #2
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e048      	b.n	8003918 <UART_SetConfig+0x348>
 8003886:	2304      	movs	r3, #4
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e045      	b.n	8003918 <UART_SetConfig+0x348>
 800388c:	2308      	movs	r3, #8
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e042      	b.n	8003918 <UART_SetConfig+0x348>
 8003892:	bf00      	nop
 8003894:	efff69f3 	.word	0xefff69f3
 8003898:	40011000 	.word	0x40011000
 800389c:	40023800 	.word	0x40023800
 80038a0:	40004400 	.word	0x40004400
 80038a4:	40004800 	.word	0x40004800
 80038a8:	40004c00 	.word	0x40004c00
 80038ac:	40005000 	.word	0x40005000
 80038b0:	40011400 	.word	0x40011400
 80038b4:	40007800 	.word	0x40007800
 80038b8:	2310      	movs	r3, #16
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e02c      	b.n	8003918 <UART_SetConfig+0x348>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a72      	ldr	r2, [pc, #456]	@ (8003a8c <UART_SetConfig+0x4bc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d125      	bne.n	8003914 <UART_SetConfig+0x344>
 80038c8:	4b71      	ldr	r3, [pc, #452]	@ (8003a90 <UART_SetConfig+0x4c0>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038d6:	d017      	beq.n	8003908 <UART_SetConfig+0x338>
 80038d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038dc:	d817      	bhi.n	800390e <UART_SetConfig+0x33e>
 80038de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e2:	d00b      	beq.n	80038fc <UART_SetConfig+0x32c>
 80038e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e8:	d811      	bhi.n	800390e <UART_SetConfig+0x33e>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <UART_SetConfig+0x326>
 80038ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f2:	d006      	beq.n	8003902 <UART_SetConfig+0x332>
 80038f4:	e00b      	b.n	800390e <UART_SetConfig+0x33e>
 80038f6:	2300      	movs	r3, #0
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e00d      	b.n	8003918 <UART_SetConfig+0x348>
 80038fc:	2302      	movs	r3, #2
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e00a      	b.n	8003918 <UART_SetConfig+0x348>
 8003902:	2304      	movs	r3, #4
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e007      	b.n	8003918 <UART_SetConfig+0x348>
 8003908:	2308      	movs	r3, #8
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e004      	b.n	8003918 <UART_SetConfig+0x348>
 800390e:	2310      	movs	r3, #16
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e001      	b.n	8003918 <UART_SetConfig+0x348>
 8003914:	2310      	movs	r3, #16
 8003916:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003920:	d15b      	bne.n	80039da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003922:	7ffb      	ldrb	r3, [r7, #31]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d828      	bhi.n	800397a <UART_SetConfig+0x3aa>
 8003928:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <UART_SetConfig+0x360>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003955 	.word	0x08003955
 8003934:	0800395d 	.word	0x0800395d
 8003938:	08003965 	.word	0x08003965
 800393c:	0800397b 	.word	0x0800397b
 8003940:	0800396b 	.word	0x0800396b
 8003944:	0800397b 	.word	0x0800397b
 8003948:	0800397b 	.word	0x0800397b
 800394c:	0800397b 	.word	0x0800397b
 8003950:	08003973 	.word	0x08003973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003954:	f7ff f914 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8003958:	61b8      	str	r0, [r7, #24]
        break;
 800395a:	e013      	b.n	8003984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800395c:	f7ff f924 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 8003960:	61b8      	str	r0, [r7, #24]
        break;
 8003962:	e00f      	b.n	8003984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003964:	4b4b      	ldr	r3, [pc, #300]	@ (8003a94 <UART_SetConfig+0x4c4>)
 8003966:	61bb      	str	r3, [r7, #24]
        break;
 8003968:	e00c      	b.n	8003984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396a:	f7fe fff7 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800396e:	61b8      	str	r0, [r7, #24]
        break;
 8003970:	e008      	b.n	8003984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003976:	61bb      	str	r3, [r7, #24]
        break;
 8003978:	e004      	b.n	8003984 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	77bb      	strb	r3, [r7, #30]
        break;
 8003982:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d074      	beq.n	8003a74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	005a      	lsls	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b0f      	cmp	r3, #15
 80039a4:	d916      	bls.n	80039d4 <UART_SetConfig+0x404>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ac:	d212      	bcs.n	80039d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	f023 030f 	bic.w	r3, r3, #15
 80039b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	89fb      	ldrh	r3, [r7, #14]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	89fa      	ldrh	r2, [r7, #14]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	e04f      	b.n	8003a74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	77bb      	strb	r3, [r7, #30]
 80039d8:	e04c      	b.n	8003a74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039da:	7ffb      	ldrb	r3, [r7, #31]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d828      	bhi.n	8003a32 <UART_SetConfig+0x462>
 80039e0:	a201      	add	r2, pc, #4	@ (adr r2, 80039e8 <UART_SetConfig+0x418>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a15 	.word	0x08003a15
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a33 	.word	0x08003a33
 80039f8:	08003a23 	.word	0x08003a23
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a33 	.word	0x08003a33
 8003a04:	08003a33 	.word	0x08003a33
 8003a08:	08003a2b 	.word	0x08003a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7ff f8b8 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8003a10:	61b8      	str	r0, [r7, #24]
        break;
 8003a12:	e013      	b.n	8003a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a14:	f7ff f8c8 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 8003a18:	61b8      	str	r0, [r7, #24]
        break;
 8003a1a:	e00f      	b.n	8003a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a94 <UART_SetConfig+0x4c4>)
 8003a1e:	61bb      	str	r3, [r7, #24]
        break;
 8003a20:	e00c      	b.n	8003a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7fe ff9b 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8003a26:	61b8      	str	r0, [r7, #24]
        break;
 8003a28:	e008      	b.n	8003a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e004      	b.n	8003a3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	77bb      	strb	r3, [r7, #30]
        break;
 8003a3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d018      	beq.n	8003a74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	085a      	lsrs	r2, r3, #1
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	441a      	add	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d909      	bls.n	8003a70 <UART_SetConfig+0x4a0>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a62:	d205      	bcs.n	8003a70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	e001      	b.n	8003a74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a80:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40007c00 	.word	0x40007c00
 8003a90:	40023800 	.word	0x40023800
 8003a94:	00f42400 	.word	0x00f42400

08003a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01a      	beq.n	8003bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b96:	d10a      	bne.n	8003bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b098      	sub	sp, #96	@ 0x60
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bec:	f7fd fb40 	bl	8001270 <HAL_GetTick>
 8003bf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d12e      	bne.n	8003c5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f88c 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d021      	beq.n	8003c5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e6      	bne.n	8003c1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e062      	b.n	8003d24 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d149      	bne.n	8003d00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c74:	2200      	movs	r2, #0
 8003c76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f856 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d03c      	beq.n	8003d00 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	623b      	str	r3, [r7, #32]
   return(result);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e6      	bne.n	8003c86 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cd8:	61fa      	str	r2, [r7, #28]
 8003cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	69b9      	ldr	r1, [r7, #24]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e5      	bne.n	8003cb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e011      	b.n	8003d24 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3758      	adds	r7, #88	@ 0x58
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3c:	e04f      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d04b      	beq.n	8003dde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fd fa93 	bl	8001270 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e04e      	b.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d037      	beq.n	8003dde <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b80      	cmp	r3, #128	@ 0x80
 8003d72:	d034      	beq.n	8003dde <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b40      	cmp	r3, #64	@ 0x40
 8003d78:	d031      	beq.n	8003dde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d110      	bne.n	8003daa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f838 	bl	8003e06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e029      	b.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003db8:	d111      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f81e 	bl	8003e06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e00f      	b.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4013      	ands	r3, r2
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d0a0      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b095      	sub	sp, #84	@ 0x54
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3308      	adds	r3, #8
 8003e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d118      	bne.n	8003eae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f023 0310 	bic.w	r3, r3, #16
 8003e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6979      	ldr	r1, [r7, #20]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e6      	bne.n	8003e7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ec2:	bf00      	nop
 8003ec4:	3754      	adds	r7, #84	@ 0x54
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	f107 001c 	add.w	r0, r7, #28
 8003ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ee2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d121      	bne.n	8003f2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	4b21      	ldr	r3, [pc, #132]	@ (8003f80 <USB_CoreInit+0xb0>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fa92 	bl	800444c <USB_CoreReset>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	73fb      	strb	r3, [r7, #15]
 8003f2c:	e010      	b.n	8003f50 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa86 	bl	800444c <USB_CoreReset>
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003f50:	7fbb      	ldrb	r3, [r7, #30]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d10b      	bne.n	8003f6e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f043 0206 	orr.w	r2, r3, #6
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f043 0220 	orr.w	r2, r3, #32
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f7a:	b004      	add	sp, #16
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	ffbdffbf 	.word	0xffbdffbf

08003f84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f023 0201 	bic.w	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d115      	bne.n	8003ff4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003fd4:	200a      	movs	r0, #10
 8003fd6:	f7fd f957 	bl	8001288 <HAL_Delay>
      ms += 10U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	330a      	adds	r3, #10
 8003fde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fa25 	bl	8004430 <USB_GetMode>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d01e      	beq.n	800402a <USB_SetCurrentMode+0x84>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ff0:	d9f0      	bls.n	8003fd4 <USB_SetCurrentMode+0x2e>
 8003ff2:	e01a      	b.n	800402a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d115      	bne.n	8004026 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004006:	200a      	movs	r0, #10
 8004008:	f7fd f93e 	bl	8001288 <HAL_Delay>
      ms += 10U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	330a      	adds	r3, #10
 8004010:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa0c 	bl	8004430 <USB_GetMode>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <USB_SetCurrentMode+0x84>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2bc7      	cmp	r3, #199	@ 0xc7
 8004022:	d9f0      	bls.n	8004006 <USB_SetCurrentMode+0x60>
 8004024:	e001      	b.n	800402a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e005      	b.n	8004036 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2bc8      	cmp	r3, #200	@ 0xc8
 800402e:	d101      	bne.n	8004034 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004040:	b084      	sub	sp, #16
 8004042:	b580      	push	{r7, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800404e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e009      	b.n	8004074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3340      	adds	r3, #64	@ 0x40
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	2200      	movs	r2, #0
 800406c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	3301      	adds	r3, #1
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b0e      	cmp	r3, #14
 8004078:	d9f2      	bls.n	8004060 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800407a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800407e:	2b00      	cmp	r3, #0
 8004080:	d11c      	bne.n	80040bc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004090:	f043 0302 	orr.w	r3, r3, #2
 8004094:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e005      	b.n	80040c8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040ce:	461a      	mov	r2, r3
 80040d0:	2300      	movs	r3, #0
 80040d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10d      	bne.n	80040f8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040e4:	2100      	movs	r1, #0
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f968 	bl	80043bc <USB_SetDevSpeed>
 80040ec:	e008      	b.n	8004100 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040ee:	2101      	movs	r1, #1
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f963 	bl	80043bc <USB_SetDevSpeed>
 80040f6:	e003      	b.n	8004100 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040f8:	2103      	movs	r1, #3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f95e 	bl	80043bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004100:	2110      	movs	r1, #16
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f8fa 	bl	80042fc <USB_FlushTxFifo>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f924 	bl	8004360 <USB_FlushRxFifo>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004128:	461a      	mov	r2, r3
 800412a:	2300      	movs	r3, #0
 800412c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004134:	461a      	mov	r2, r3
 8004136:	2300      	movs	r3, #0
 8004138:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004140:	461a      	mov	r2, r3
 8004142:	2300      	movs	r3, #0
 8004144:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	e043      	b.n	80041d4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800415e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004162:	d118      	bne.n	8004196 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004176:	461a      	mov	r2, r3
 8004178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e013      	b.n	80041a8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e008      	b.n	80041a8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a2:	461a      	mov	r2, r3
 80041a4:	2300      	movs	r3, #0
 80041a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b4:	461a      	mov	r2, r3
 80041b6:	2300      	movs	r3, #0
 80041b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c6:	461a      	mov	r2, r3
 80041c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3301      	adds	r3, #1
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041d8:	461a      	mov	r2, r3
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4293      	cmp	r3, r2
 80041de:	d3b5      	bcc.n	800414c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e0:	2300      	movs	r3, #0
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e043      	b.n	800426e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041fc:	d118      	bne.n	8004230 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004210:	461a      	mov	r2, r3
 8004212:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	e013      	b.n	8004242 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e008      	b.n	8004242 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800423c:	461a      	mov	r2, r3
 800423e:	2300      	movs	r3, #0
 8004240:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424e:	461a      	mov	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004260:	461a      	mov	r2, r3
 8004262:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004266:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	3301      	adds	r3, #1
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004272:	461a      	mov	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4293      	cmp	r3, r2
 8004278:	d3b5      	bcc.n	80041e6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800428c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800429a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800429c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f043 0210 	orr.w	r2, r3, #16
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	4b0f      	ldr	r3, [pc, #60]	@ (80042f4 <USB_DevInit+0x2b4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f043 0208 	orr.w	r2, r3, #8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <USB_DevInit+0x2b8>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042f0:	b004      	add	sp, #16
 80042f2:	4770      	bx	lr
 80042f4:	803c3800 	.word	0x803c3800
 80042f8:	40000004 	.word	0x40000004

080042fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3301      	adds	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004316:	d901      	bls.n	800431c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e01b      	b.n	8004354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	daf2      	bge.n	800430a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	019b      	lsls	r3, r3, #6
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3301      	adds	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004340:	d901      	bls.n	8004346 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e006      	b.n	8004354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b20      	cmp	r3, #32
 8004350:	d0f0      	beq.n	8004334 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3301      	adds	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004378:	d901      	bls.n	800437e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e018      	b.n	80043b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	daf2      	bge.n	800436c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2210      	movs	r2, #16
 800438e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800439c:	d901      	bls.n	80043a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e006      	b.n	80043b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d0f0      	beq.n	8004390 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	68f9      	ldr	r1, [r7, #12]
 80043d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004408:	f023 0303 	bic.w	r3, r3, #3
 800440c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800441c:	f043 0302 	orr.w	r3, r3, #2
 8004420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0301 	and.w	r3, r3, #1
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004464:	d901      	bls.n	800446a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e022      	b.n	80044b0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	daf2      	bge.n	8004458 <USB_CoreReset+0xc>

  count = 10U;
 8004472:	230a      	movs	r3, #10
 8004474:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004476:	e002      	b.n	800447e <USB_CoreReset+0x32>
  {
    count--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3b01      	subs	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f9      	bne.n	8004478 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f043 0201 	orr.w	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800449c:	d901      	bls.n	80044a2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e006      	b.n	80044b0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d0f0      	beq.n	8004490 <USB_CoreReset+0x44>

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <std>:
 80044bc:	2300      	movs	r3, #0
 80044be:	b510      	push	{r4, lr}
 80044c0:	4604      	mov	r4, r0
 80044c2:	e9c0 3300 	strd	r3, r3, [r0]
 80044c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044ca:	6083      	str	r3, [r0, #8]
 80044cc:	8181      	strh	r1, [r0, #12]
 80044ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80044d0:	81c2      	strh	r2, [r0, #14]
 80044d2:	6183      	str	r3, [r0, #24]
 80044d4:	4619      	mov	r1, r3
 80044d6:	2208      	movs	r2, #8
 80044d8:	305c      	adds	r0, #92	@ 0x5c
 80044da:	f000 f9f9 	bl	80048d0 <memset>
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <std+0x58>)
 80044e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <std+0x5c>)
 80044e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044e6:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <std+0x60>)
 80044e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <std+0x64>)
 80044ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <std+0x68>)
 80044f0:	6224      	str	r4, [r4, #32]
 80044f2:	429c      	cmp	r4, r3
 80044f4:	d006      	beq.n	8004504 <std+0x48>
 80044f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044fa:	4294      	cmp	r4, r2
 80044fc:	d002      	beq.n	8004504 <std+0x48>
 80044fe:	33d0      	adds	r3, #208	@ 0xd0
 8004500:	429c      	cmp	r4, r3
 8004502:	d105      	bne.n	8004510 <std+0x54>
 8004504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800450c:	f000 ba58 	b.w	80049c0 <__retarget_lock_init_recursive>
 8004510:	bd10      	pop	{r4, pc}
 8004512:	bf00      	nop
 8004514:	08004721 	.word	0x08004721
 8004518:	08004743 	.word	0x08004743
 800451c:	0800477b 	.word	0x0800477b
 8004520:	0800479f 	.word	0x0800479f
 8004524:	20000824 	.word	0x20000824

08004528 <stdio_exit_handler>:
 8004528:	4a02      	ldr	r2, [pc, #8]	@ (8004534 <stdio_exit_handler+0xc>)
 800452a:	4903      	ldr	r1, [pc, #12]	@ (8004538 <stdio_exit_handler+0x10>)
 800452c:	4803      	ldr	r0, [pc, #12]	@ (800453c <stdio_exit_handler+0x14>)
 800452e:	f000 b869 	b.w	8004604 <_fwalk_sglue>
 8004532:	bf00      	nop
 8004534:	2000000c 	.word	0x2000000c
 8004538:	0800525d 	.word	0x0800525d
 800453c:	2000001c 	.word	0x2000001c

08004540 <cleanup_stdio>:
 8004540:	6841      	ldr	r1, [r0, #4]
 8004542:	4b0c      	ldr	r3, [pc, #48]	@ (8004574 <cleanup_stdio+0x34>)
 8004544:	4299      	cmp	r1, r3
 8004546:	b510      	push	{r4, lr}
 8004548:	4604      	mov	r4, r0
 800454a:	d001      	beq.n	8004550 <cleanup_stdio+0x10>
 800454c:	f000 fe86 	bl	800525c <_fflush_r>
 8004550:	68a1      	ldr	r1, [r4, #8]
 8004552:	4b09      	ldr	r3, [pc, #36]	@ (8004578 <cleanup_stdio+0x38>)
 8004554:	4299      	cmp	r1, r3
 8004556:	d002      	beq.n	800455e <cleanup_stdio+0x1e>
 8004558:	4620      	mov	r0, r4
 800455a:	f000 fe7f 	bl	800525c <_fflush_r>
 800455e:	68e1      	ldr	r1, [r4, #12]
 8004560:	4b06      	ldr	r3, [pc, #24]	@ (800457c <cleanup_stdio+0x3c>)
 8004562:	4299      	cmp	r1, r3
 8004564:	d004      	beq.n	8004570 <cleanup_stdio+0x30>
 8004566:	4620      	mov	r0, r4
 8004568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800456c:	f000 be76 	b.w	800525c <_fflush_r>
 8004570:	bd10      	pop	{r4, pc}
 8004572:	bf00      	nop
 8004574:	20000824 	.word	0x20000824
 8004578:	2000088c 	.word	0x2000088c
 800457c:	200008f4 	.word	0x200008f4

08004580 <global_stdio_init.part.0>:
 8004580:	b510      	push	{r4, lr}
 8004582:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <global_stdio_init.part.0+0x30>)
 8004584:	4c0b      	ldr	r4, [pc, #44]	@ (80045b4 <global_stdio_init.part.0+0x34>)
 8004586:	4a0c      	ldr	r2, [pc, #48]	@ (80045b8 <global_stdio_init.part.0+0x38>)
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	4620      	mov	r0, r4
 800458c:	2200      	movs	r2, #0
 800458e:	2104      	movs	r1, #4
 8004590:	f7ff ff94 	bl	80044bc <std>
 8004594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004598:	2201      	movs	r2, #1
 800459a:	2109      	movs	r1, #9
 800459c:	f7ff ff8e 	bl	80044bc <std>
 80045a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045a4:	2202      	movs	r2, #2
 80045a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045aa:	2112      	movs	r1, #18
 80045ac:	f7ff bf86 	b.w	80044bc <std>
 80045b0:	2000095c 	.word	0x2000095c
 80045b4:	20000824 	.word	0x20000824
 80045b8:	08004529 	.word	0x08004529

080045bc <__sfp_lock_acquire>:
 80045bc:	4801      	ldr	r0, [pc, #4]	@ (80045c4 <__sfp_lock_acquire+0x8>)
 80045be:	f000 ba00 	b.w	80049c2 <__retarget_lock_acquire_recursive>
 80045c2:	bf00      	nop
 80045c4:	20000965 	.word	0x20000965

080045c8 <__sfp_lock_release>:
 80045c8:	4801      	ldr	r0, [pc, #4]	@ (80045d0 <__sfp_lock_release+0x8>)
 80045ca:	f000 b9fb 	b.w	80049c4 <__retarget_lock_release_recursive>
 80045ce:	bf00      	nop
 80045d0:	20000965 	.word	0x20000965

080045d4 <__sinit>:
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4604      	mov	r4, r0
 80045d8:	f7ff fff0 	bl	80045bc <__sfp_lock_acquire>
 80045dc:	6a23      	ldr	r3, [r4, #32]
 80045de:	b11b      	cbz	r3, 80045e8 <__sinit+0x14>
 80045e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e4:	f7ff bff0 	b.w	80045c8 <__sfp_lock_release>
 80045e8:	4b04      	ldr	r3, [pc, #16]	@ (80045fc <__sinit+0x28>)
 80045ea:	6223      	str	r3, [r4, #32]
 80045ec:	4b04      	ldr	r3, [pc, #16]	@ (8004600 <__sinit+0x2c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f5      	bne.n	80045e0 <__sinit+0xc>
 80045f4:	f7ff ffc4 	bl	8004580 <global_stdio_init.part.0>
 80045f8:	e7f2      	b.n	80045e0 <__sinit+0xc>
 80045fa:	bf00      	nop
 80045fc:	08004541 	.word	0x08004541
 8004600:	2000095c 	.word	0x2000095c

08004604 <_fwalk_sglue>:
 8004604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004608:	4607      	mov	r7, r0
 800460a:	4688      	mov	r8, r1
 800460c:	4614      	mov	r4, r2
 800460e:	2600      	movs	r6, #0
 8004610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004614:	f1b9 0901 	subs.w	r9, r9, #1
 8004618:	d505      	bpl.n	8004626 <_fwalk_sglue+0x22>
 800461a:	6824      	ldr	r4, [r4, #0]
 800461c:	2c00      	cmp	r4, #0
 800461e:	d1f7      	bne.n	8004610 <_fwalk_sglue+0xc>
 8004620:	4630      	mov	r0, r6
 8004622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004626:	89ab      	ldrh	r3, [r5, #12]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d907      	bls.n	800463c <_fwalk_sglue+0x38>
 800462c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004630:	3301      	adds	r3, #1
 8004632:	d003      	beq.n	800463c <_fwalk_sglue+0x38>
 8004634:	4629      	mov	r1, r5
 8004636:	4638      	mov	r0, r7
 8004638:	47c0      	blx	r8
 800463a:	4306      	orrs	r6, r0
 800463c:	3568      	adds	r5, #104	@ 0x68
 800463e:	e7e9      	b.n	8004614 <_fwalk_sglue+0x10>

08004640 <iprintf>:
 8004640:	b40f      	push	{r0, r1, r2, r3}
 8004642:	b507      	push	{r0, r1, r2, lr}
 8004644:	4906      	ldr	r1, [pc, #24]	@ (8004660 <iprintf+0x20>)
 8004646:	ab04      	add	r3, sp, #16
 8004648:	6808      	ldr	r0, [r1, #0]
 800464a:	f853 2b04 	ldr.w	r2, [r3], #4
 800464e:	6881      	ldr	r1, [r0, #8]
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	f000 fadb 	bl	8004c0c <_vfiprintf_r>
 8004656:	b003      	add	sp, #12
 8004658:	f85d eb04 	ldr.w	lr, [sp], #4
 800465c:	b004      	add	sp, #16
 800465e:	4770      	bx	lr
 8004660:	20000018 	.word	0x20000018

08004664 <_puts_r>:
 8004664:	6a03      	ldr	r3, [r0, #32]
 8004666:	b570      	push	{r4, r5, r6, lr}
 8004668:	6884      	ldr	r4, [r0, #8]
 800466a:	4605      	mov	r5, r0
 800466c:	460e      	mov	r6, r1
 800466e:	b90b      	cbnz	r3, 8004674 <_puts_r+0x10>
 8004670:	f7ff ffb0 	bl	80045d4 <__sinit>
 8004674:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004676:	07db      	lsls	r3, r3, #31
 8004678:	d405      	bmi.n	8004686 <_puts_r+0x22>
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	0598      	lsls	r0, r3, #22
 800467e:	d402      	bmi.n	8004686 <_puts_r+0x22>
 8004680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004682:	f000 f99e 	bl	80049c2 <__retarget_lock_acquire_recursive>
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	0719      	lsls	r1, r3, #28
 800468a:	d502      	bpl.n	8004692 <_puts_r+0x2e>
 800468c:	6923      	ldr	r3, [r4, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d135      	bne.n	80046fe <_puts_r+0x9a>
 8004692:	4621      	mov	r1, r4
 8004694:	4628      	mov	r0, r5
 8004696:	f000 f8c5 	bl	8004824 <__swsetup_r>
 800469a:	b380      	cbz	r0, 80046fe <_puts_r+0x9a>
 800469c:	f04f 35ff 	mov.w	r5, #4294967295
 80046a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046a2:	07da      	lsls	r2, r3, #31
 80046a4:	d405      	bmi.n	80046b2 <_puts_r+0x4e>
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	059b      	lsls	r3, r3, #22
 80046aa:	d402      	bmi.n	80046b2 <_puts_r+0x4e>
 80046ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046ae:	f000 f989 	bl	80049c4 <__retarget_lock_release_recursive>
 80046b2:	4628      	mov	r0, r5
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da04      	bge.n	80046c4 <_puts_r+0x60>
 80046ba:	69a2      	ldr	r2, [r4, #24]
 80046bc:	429a      	cmp	r2, r3
 80046be:	dc17      	bgt.n	80046f0 <_puts_r+0x8c>
 80046c0:	290a      	cmp	r1, #10
 80046c2:	d015      	beq.n	80046f0 <_puts_r+0x8c>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	6022      	str	r2, [r4, #0]
 80046ca:	7019      	strb	r1, [r3, #0]
 80046cc:	68a3      	ldr	r3, [r4, #8]
 80046ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046d2:	3b01      	subs	r3, #1
 80046d4:	60a3      	str	r3, [r4, #8]
 80046d6:	2900      	cmp	r1, #0
 80046d8:	d1ed      	bne.n	80046b6 <_puts_r+0x52>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	da11      	bge.n	8004702 <_puts_r+0x9e>
 80046de:	4622      	mov	r2, r4
 80046e0:	210a      	movs	r1, #10
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 f85f 	bl	80047a6 <__swbuf_r>
 80046e8:	3001      	adds	r0, #1
 80046ea:	d0d7      	beq.n	800469c <_puts_r+0x38>
 80046ec:	250a      	movs	r5, #10
 80046ee:	e7d7      	b.n	80046a0 <_puts_r+0x3c>
 80046f0:	4622      	mov	r2, r4
 80046f2:	4628      	mov	r0, r5
 80046f4:	f000 f857 	bl	80047a6 <__swbuf_r>
 80046f8:	3001      	adds	r0, #1
 80046fa:	d1e7      	bne.n	80046cc <_puts_r+0x68>
 80046fc:	e7ce      	b.n	800469c <_puts_r+0x38>
 80046fe:	3e01      	subs	r6, #1
 8004700:	e7e4      	b.n	80046cc <_puts_r+0x68>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	6022      	str	r2, [r4, #0]
 8004708:	220a      	movs	r2, #10
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	e7ee      	b.n	80046ec <_puts_r+0x88>
	...

08004710 <puts>:
 8004710:	4b02      	ldr	r3, [pc, #8]	@ (800471c <puts+0xc>)
 8004712:	4601      	mov	r1, r0
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	f7ff bfa5 	b.w	8004664 <_puts_r>
 800471a:	bf00      	nop
 800471c:	20000018 	.word	0x20000018

08004720 <__sread>:
 8004720:	b510      	push	{r4, lr}
 8004722:	460c      	mov	r4, r1
 8004724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004728:	f000 f8fc 	bl	8004924 <_read_r>
 800472c:	2800      	cmp	r0, #0
 800472e:	bfab      	itete	ge
 8004730:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004732:	89a3      	ldrhlt	r3, [r4, #12]
 8004734:	181b      	addge	r3, r3, r0
 8004736:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800473a:	bfac      	ite	ge
 800473c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800473e:	81a3      	strhlt	r3, [r4, #12]
 8004740:	bd10      	pop	{r4, pc}

08004742 <__swrite>:
 8004742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004746:	461f      	mov	r7, r3
 8004748:	898b      	ldrh	r3, [r1, #12]
 800474a:	05db      	lsls	r3, r3, #23
 800474c:	4605      	mov	r5, r0
 800474e:	460c      	mov	r4, r1
 8004750:	4616      	mov	r6, r2
 8004752:	d505      	bpl.n	8004760 <__swrite+0x1e>
 8004754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004758:	2302      	movs	r3, #2
 800475a:	2200      	movs	r2, #0
 800475c:	f000 f8d0 	bl	8004900 <_lseek_r>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800476a:	81a3      	strh	r3, [r4, #12]
 800476c:	4632      	mov	r2, r6
 800476e:	463b      	mov	r3, r7
 8004770:	4628      	mov	r0, r5
 8004772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004776:	f000 b8e7 	b.w	8004948 <_write_r>

0800477a <__sseek>:
 800477a:	b510      	push	{r4, lr}
 800477c:	460c      	mov	r4, r1
 800477e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004782:	f000 f8bd 	bl	8004900 <_lseek_r>
 8004786:	1c43      	adds	r3, r0, #1
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	bf15      	itete	ne
 800478c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800478e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004792:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004796:	81a3      	strheq	r3, [r4, #12]
 8004798:	bf18      	it	ne
 800479a:	81a3      	strhne	r3, [r4, #12]
 800479c:	bd10      	pop	{r4, pc}

0800479e <__sclose>:
 800479e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a2:	f000 b89d 	b.w	80048e0 <_close_r>

080047a6 <__swbuf_r>:
 80047a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a8:	460e      	mov	r6, r1
 80047aa:	4614      	mov	r4, r2
 80047ac:	4605      	mov	r5, r0
 80047ae:	b118      	cbz	r0, 80047b8 <__swbuf_r+0x12>
 80047b0:	6a03      	ldr	r3, [r0, #32]
 80047b2:	b90b      	cbnz	r3, 80047b8 <__swbuf_r+0x12>
 80047b4:	f7ff ff0e 	bl	80045d4 <__sinit>
 80047b8:	69a3      	ldr	r3, [r4, #24]
 80047ba:	60a3      	str	r3, [r4, #8]
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	071a      	lsls	r2, r3, #28
 80047c0:	d501      	bpl.n	80047c6 <__swbuf_r+0x20>
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	b943      	cbnz	r3, 80047d8 <__swbuf_r+0x32>
 80047c6:	4621      	mov	r1, r4
 80047c8:	4628      	mov	r0, r5
 80047ca:	f000 f82b 	bl	8004824 <__swsetup_r>
 80047ce:	b118      	cbz	r0, 80047d8 <__swbuf_r+0x32>
 80047d0:	f04f 37ff 	mov.w	r7, #4294967295
 80047d4:	4638      	mov	r0, r7
 80047d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	6922      	ldr	r2, [r4, #16]
 80047dc:	1a98      	subs	r0, r3, r2
 80047de:	6963      	ldr	r3, [r4, #20]
 80047e0:	b2f6      	uxtb	r6, r6
 80047e2:	4283      	cmp	r3, r0
 80047e4:	4637      	mov	r7, r6
 80047e6:	dc05      	bgt.n	80047f4 <__swbuf_r+0x4e>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 fd36 	bl	800525c <_fflush_r>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d1ed      	bne.n	80047d0 <__swbuf_r+0x2a>
 80047f4:	68a3      	ldr	r3, [r4, #8]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	60a3      	str	r3, [r4, #8]
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	6022      	str	r2, [r4, #0]
 8004800:	701e      	strb	r6, [r3, #0]
 8004802:	6962      	ldr	r2, [r4, #20]
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	429a      	cmp	r2, r3
 8004808:	d004      	beq.n	8004814 <__swbuf_r+0x6e>
 800480a:	89a3      	ldrh	r3, [r4, #12]
 800480c:	07db      	lsls	r3, r3, #31
 800480e:	d5e1      	bpl.n	80047d4 <__swbuf_r+0x2e>
 8004810:	2e0a      	cmp	r6, #10
 8004812:	d1df      	bne.n	80047d4 <__swbuf_r+0x2e>
 8004814:	4621      	mov	r1, r4
 8004816:	4628      	mov	r0, r5
 8004818:	f000 fd20 	bl	800525c <_fflush_r>
 800481c:	2800      	cmp	r0, #0
 800481e:	d0d9      	beq.n	80047d4 <__swbuf_r+0x2e>
 8004820:	e7d6      	b.n	80047d0 <__swbuf_r+0x2a>
	...

08004824 <__swsetup_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4b29      	ldr	r3, [pc, #164]	@ (80048cc <__swsetup_r+0xa8>)
 8004828:	4605      	mov	r5, r0
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	460c      	mov	r4, r1
 800482e:	b118      	cbz	r0, 8004838 <__swsetup_r+0x14>
 8004830:	6a03      	ldr	r3, [r0, #32]
 8004832:	b90b      	cbnz	r3, 8004838 <__swsetup_r+0x14>
 8004834:	f7ff fece 	bl	80045d4 <__sinit>
 8004838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800483c:	0719      	lsls	r1, r3, #28
 800483e:	d422      	bmi.n	8004886 <__swsetup_r+0x62>
 8004840:	06da      	lsls	r2, r3, #27
 8004842:	d407      	bmi.n	8004854 <__swsetup_r+0x30>
 8004844:	2209      	movs	r2, #9
 8004846:	602a      	str	r2, [r5, #0]
 8004848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	f04f 30ff 	mov.w	r0, #4294967295
 8004852:	e033      	b.n	80048bc <__swsetup_r+0x98>
 8004854:	0758      	lsls	r0, r3, #29
 8004856:	d512      	bpl.n	800487e <__swsetup_r+0x5a>
 8004858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800485a:	b141      	cbz	r1, 800486e <__swsetup_r+0x4a>
 800485c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004860:	4299      	cmp	r1, r3
 8004862:	d002      	beq.n	800486a <__swsetup_r+0x46>
 8004864:	4628      	mov	r0, r5
 8004866:	f000 f8af 	bl	80049c8 <_free_r>
 800486a:	2300      	movs	r3, #0
 800486c:	6363      	str	r3, [r4, #52]	@ 0x34
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	2300      	movs	r3, #0
 8004878:	6063      	str	r3, [r4, #4]
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	f043 0308 	orr.w	r3, r3, #8
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	b94b      	cbnz	r3, 800489e <__swsetup_r+0x7a>
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004894:	d003      	beq.n	800489e <__swsetup_r+0x7a>
 8004896:	4621      	mov	r1, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 fd2d 	bl	80052f8 <__smakebuf_r>
 800489e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a2:	f013 0201 	ands.w	r2, r3, #1
 80048a6:	d00a      	beq.n	80048be <__swsetup_r+0x9a>
 80048a8:	2200      	movs	r2, #0
 80048aa:	60a2      	str	r2, [r4, #8]
 80048ac:	6962      	ldr	r2, [r4, #20]
 80048ae:	4252      	negs	r2, r2
 80048b0:	61a2      	str	r2, [r4, #24]
 80048b2:	6922      	ldr	r2, [r4, #16]
 80048b4:	b942      	cbnz	r2, 80048c8 <__swsetup_r+0xa4>
 80048b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048ba:	d1c5      	bne.n	8004848 <__swsetup_r+0x24>
 80048bc:	bd38      	pop	{r3, r4, r5, pc}
 80048be:	0799      	lsls	r1, r3, #30
 80048c0:	bf58      	it	pl
 80048c2:	6962      	ldrpl	r2, [r4, #20]
 80048c4:	60a2      	str	r2, [r4, #8]
 80048c6:	e7f4      	b.n	80048b2 <__swsetup_r+0x8e>
 80048c8:	2000      	movs	r0, #0
 80048ca:	e7f7      	b.n	80048bc <__swsetup_r+0x98>
 80048cc:	20000018 	.word	0x20000018

080048d0 <memset>:
 80048d0:	4402      	add	r2, r0
 80048d2:	4603      	mov	r3, r0
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d100      	bne.n	80048da <memset+0xa>
 80048d8:	4770      	bx	lr
 80048da:	f803 1b01 	strb.w	r1, [r3], #1
 80048de:	e7f9      	b.n	80048d4 <memset+0x4>

080048e0 <_close_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4d06      	ldr	r5, [pc, #24]	@ (80048fc <_close_r+0x1c>)
 80048e4:	2300      	movs	r3, #0
 80048e6:	4604      	mov	r4, r0
 80048e8:	4608      	mov	r0, r1
 80048ea:	602b      	str	r3, [r5, #0]
 80048ec:	f7fc fbca 	bl	8001084 <_close>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d102      	bne.n	80048fa <_close_r+0x1a>
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	b103      	cbz	r3, 80048fa <_close_r+0x1a>
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	bd38      	pop	{r3, r4, r5, pc}
 80048fc:	20000960 	.word	0x20000960

08004900 <_lseek_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4d07      	ldr	r5, [pc, #28]	@ (8004920 <_lseek_r+0x20>)
 8004904:	4604      	mov	r4, r0
 8004906:	4608      	mov	r0, r1
 8004908:	4611      	mov	r1, r2
 800490a:	2200      	movs	r2, #0
 800490c:	602a      	str	r2, [r5, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	f7fc fbdf 	bl	80010d2 <_lseek>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d102      	bne.n	800491e <_lseek_r+0x1e>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b103      	cbz	r3, 800491e <_lseek_r+0x1e>
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	bd38      	pop	{r3, r4, r5, pc}
 8004920:	20000960 	.word	0x20000960

08004924 <_read_r>:
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	4d07      	ldr	r5, [pc, #28]	@ (8004944 <_read_r+0x20>)
 8004928:	4604      	mov	r4, r0
 800492a:	4608      	mov	r0, r1
 800492c:	4611      	mov	r1, r2
 800492e:	2200      	movs	r2, #0
 8004930:	602a      	str	r2, [r5, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	f7fc fb6d 	bl	8001012 <_read>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_read_r+0x1e>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_read_r+0x1e>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	20000960 	.word	0x20000960

08004948 <_write_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4d07      	ldr	r5, [pc, #28]	@ (8004968 <_write_r+0x20>)
 800494c:	4604      	mov	r4, r0
 800494e:	4608      	mov	r0, r1
 8004950:	4611      	mov	r1, r2
 8004952:	2200      	movs	r2, #0
 8004954:	602a      	str	r2, [r5, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f7fc fb78 	bl	800104c <_write>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_write_r+0x1e>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_write_r+0x1e>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000960 	.word	0x20000960

0800496c <__errno>:
 800496c:	4b01      	ldr	r3, [pc, #4]	@ (8004974 <__errno+0x8>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000018 	.word	0x20000018

08004978 <__libc_init_array>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4d0d      	ldr	r5, [pc, #52]	@ (80049b0 <__libc_init_array+0x38>)
 800497c:	4c0d      	ldr	r4, [pc, #52]	@ (80049b4 <__libc_init_array+0x3c>)
 800497e:	1b64      	subs	r4, r4, r5
 8004980:	10a4      	asrs	r4, r4, #2
 8004982:	2600      	movs	r6, #0
 8004984:	42a6      	cmp	r6, r4
 8004986:	d109      	bne.n	800499c <__libc_init_array+0x24>
 8004988:	4d0b      	ldr	r5, [pc, #44]	@ (80049b8 <__libc_init_array+0x40>)
 800498a:	4c0c      	ldr	r4, [pc, #48]	@ (80049bc <__libc_init_array+0x44>)
 800498c:	f000 fd22 	bl	80053d4 <_init>
 8004990:	1b64      	subs	r4, r4, r5
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	2600      	movs	r6, #0
 8004996:	42a6      	cmp	r6, r4
 8004998:	d105      	bne.n	80049a6 <__libc_init_array+0x2e>
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a0:	4798      	blx	r3
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7ee      	b.n	8004984 <__libc_init_array+0xc>
 80049a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049aa:	4798      	blx	r3
 80049ac:	3601      	adds	r6, #1
 80049ae:	e7f2      	b.n	8004996 <__libc_init_array+0x1e>
 80049b0:	08005494 	.word	0x08005494
 80049b4:	08005494 	.word	0x08005494
 80049b8:	08005494 	.word	0x08005494
 80049bc:	08005498 	.word	0x08005498

080049c0 <__retarget_lock_init_recursive>:
 80049c0:	4770      	bx	lr

080049c2 <__retarget_lock_acquire_recursive>:
 80049c2:	4770      	bx	lr

080049c4 <__retarget_lock_release_recursive>:
 80049c4:	4770      	bx	lr
	...

080049c8 <_free_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4605      	mov	r5, r0
 80049cc:	2900      	cmp	r1, #0
 80049ce:	d041      	beq.n	8004a54 <_free_r+0x8c>
 80049d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d4:	1f0c      	subs	r4, r1, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfb8      	it	lt
 80049da:	18e4      	addlt	r4, r4, r3
 80049dc:	f000 f8e0 	bl	8004ba0 <__malloc_lock>
 80049e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a58 <_free_r+0x90>)
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	b933      	cbnz	r3, 80049f4 <_free_r+0x2c>
 80049e6:	6063      	str	r3, [r4, #4]
 80049e8:	6014      	str	r4, [r2, #0]
 80049ea:	4628      	mov	r0, r5
 80049ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049f0:	f000 b8dc 	b.w	8004bac <__malloc_unlock>
 80049f4:	42a3      	cmp	r3, r4
 80049f6:	d908      	bls.n	8004a0a <_free_r+0x42>
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	1821      	adds	r1, r4, r0
 80049fc:	428b      	cmp	r3, r1
 80049fe:	bf01      	itttt	eq
 8004a00:	6819      	ldreq	r1, [r3, #0]
 8004a02:	685b      	ldreq	r3, [r3, #4]
 8004a04:	1809      	addeq	r1, r1, r0
 8004a06:	6021      	streq	r1, [r4, #0]
 8004a08:	e7ed      	b.n	80049e6 <_free_r+0x1e>
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	b10b      	cbz	r3, 8004a14 <_free_r+0x4c>
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	d9fa      	bls.n	8004a0a <_free_r+0x42>
 8004a14:	6811      	ldr	r1, [r2, #0]
 8004a16:	1850      	adds	r0, r2, r1
 8004a18:	42a0      	cmp	r0, r4
 8004a1a:	d10b      	bne.n	8004a34 <_free_r+0x6c>
 8004a1c:	6820      	ldr	r0, [r4, #0]
 8004a1e:	4401      	add	r1, r0
 8004a20:	1850      	adds	r0, r2, r1
 8004a22:	4283      	cmp	r3, r0
 8004a24:	6011      	str	r1, [r2, #0]
 8004a26:	d1e0      	bne.n	80049ea <_free_r+0x22>
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	6053      	str	r3, [r2, #4]
 8004a2e:	4408      	add	r0, r1
 8004a30:	6010      	str	r0, [r2, #0]
 8004a32:	e7da      	b.n	80049ea <_free_r+0x22>
 8004a34:	d902      	bls.n	8004a3c <_free_r+0x74>
 8004a36:	230c      	movs	r3, #12
 8004a38:	602b      	str	r3, [r5, #0]
 8004a3a:	e7d6      	b.n	80049ea <_free_r+0x22>
 8004a3c:	6820      	ldr	r0, [r4, #0]
 8004a3e:	1821      	adds	r1, r4, r0
 8004a40:	428b      	cmp	r3, r1
 8004a42:	bf04      	itt	eq
 8004a44:	6819      	ldreq	r1, [r3, #0]
 8004a46:	685b      	ldreq	r3, [r3, #4]
 8004a48:	6063      	str	r3, [r4, #4]
 8004a4a:	bf04      	itt	eq
 8004a4c:	1809      	addeq	r1, r1, r0
 8004a4e:	6021      	streq	r1, [r4, #0]
 8004a50:	6054      	str	r4, [r2, #4]
 8004a52:	e7ca      	b.n	80049ea <_free_r+0x22>
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
 8004a56:	bf00      	nop
 8004a58:	2000096c 	.word	0x2000096c

08004a5c <sbrk_aligned>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8004a9c <sbrk_aligned+0x40>)
 8004a60:	460c      	mov	r4, r1
 8004a62:	6831      	ldr	r1, [r6, #0]
 8004a64:	4605      	mov	r5, r0
 8004a66:	b911      	cbnz	r1, 8004a6e <sbrk_aligned+0x12>
 8004a68:	f000 fca4 	bl	80053b4 <_sbrk_r>
 8004a6c:	6030      	str	r0, [r6, #0]
 8004a6e:	4621      	mov	r1, r4
 8004a70:	4628      	mov	r0, r5
 8004a72:	f000 fc9f 	bl	80053b4 <_sbrk_r>
 8004a76:	1c43      	adds	r3, r0, #1
 8004a78:	d103      	bne.n	8004a82 <sbrk_aligned+0x26>
 8004a7a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a7e:	4620      	mov	r0, r4
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
 8004a82:	1cc4      	adds	r4, r0, #3
 8004a84:	f024 0403 	bic.w	r4, r4, #3
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d0f8      	beq.n	8004a7e <sbrk_aligned+0x22>
 8004a8c:	1a21      	subs	r1, r4, r0
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 fc90 	bl	80053b4 <_sbrk_r>
 8004a94:	3001      	adds	r0, #1
 8004a96:	d1f2      	bne.n	8004a7e <sbrk_aligned+0x22>
 8004a98:	e7ef      	b.n	8004a7a <sbrk_aligned+0x1e>
 8004a9a:	bf00      	nop
 8004a9c:	20000968 	.word	0x20000968

08004aa0 <_malloc_r>:
 8004aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa4:	1ccd      	adds	r5, r1, #3
 8004aa6:	f025 0503 	bic.w	r5, r5, #3
 8004aaa:	3508      	adds	r5, #8
 8004aac:	2d0c      	cmp	r5, #12
 8004aae:	bf38      	it	cc
 8004ab0:	250c      	movcc	r5, #12
 8004ab2:	2d00      	cmp	r5, #0
 8004ab4:	4606      	mov	r6, r0
 8004ab6:	db01      	blt.n	8004abc <_malloc_r+0x1c>
 8004ab8:	42a9      	cmp	r1, r5
 8004aba:	d904      	bls.n	8004ac6 <_malloc_r+0x26>
 8004abc:	230c      	movs	r3, #12
 8004abe:	6033      	str	r3, [r6, #0]
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b9c <_malloc_r+0xfc>
 8004aca:	f000 f869 	bl	8004ba0 <__malloc_lock>
 8004ace:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad2:	461c      	mov	r4, r3
 8004ad4:	bb44      	cbnz	r4, 8004b28 <_malloc_r+0x88>
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7ff ffbf 	bl	8004a5c <sbrk_aligned>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	d158      	bne.n	8004b96 <_malloc_r+0xf6>
 8004ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ae8:	4627      	mov	r7, r4
 8004aea:	2f00      	cmp	r7, #0
 8004aec:	d143      	bne.n	8004b76 <_malloc_r+0xd6>
 8004aee:	2c00      	cmp	r4, #0
 8004af0:	d04b      	beq.n	8004b8a <_malloc_r+0xea>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	4639      	mov	r1, r7
 8004af6:	4630      	mov	r0, r6
 8004af8:	eb04 0903 	add.w	r9, r4, r3
 8004afc:	f000 fc5a 	bl	80053b4 <_sbrk_r>
 8004b00:	4581      	cmp	r9, r0
 8004b02:	d142      	bne.n	8004b8a <_malloc_r+0xea>
 8004b04:	6821      	ldr	r1, [r4, #0]
 8004b06:	1a6d      	subs	r5, r5, r1
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f7ff ffa6 	bl	8004a5c <sbrk_aligned>
 8004b10:	3001      	adds	r0, #1
 8004b12:	d03a      	beq.n	8004b8a <_malloc_r+0xea>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	442b      	add	r3, r5
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	bb62      	cbnz	r2, 8004b7c <_malloc_r+0xdc>
 8004b22:	f8c8 7000 	str.w	r7, [r8]
 8004b26:	e00f      	b.n	8004b48 <_malloc_r+0xa8>
 8004b28:	6822      	ldr	r2, [r4, #0]
 8004b2a:	1b52      	subs	r2, r2, r5
 8004b2c:	d420      	bmi.n	8004b70 <_malloc_r+0xd0>
 8004b2e:	2a0b      	cmp	r2, #11
 8004b30:	d917      	bls.n	8004b62 <_malloc_r+0xc2>
 8004b32:	1961      	adds	r1, r4, r5
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	6025      	str	r5, [r4, #0]
 8004b38:	bf18      	it	ne
 8004b3a:	6059      	strne	r1, [r3, #4]
 8004b3c:	6863      	ldr	r3, [r4, #4]
 8004b3e:	bf08      	it	eq
 8004b40:	f8c8 1000 	streq.w	r1, [r8]
 8004b44:	5162      	str	r2, [r4, r5]
 8004b46:	604b      	str	r3, [r1, #4]
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f000 f82f 	bl	8004bac <__malloc_unlock>
 8004b4e:	f104 000b 	add.w	r0, r4, #11
 8004b52:	1d23      	adds	r3, r4, #4
 8004b54:	f020 0007 	bic.w	r0, r0, #7
 8004b58:	1ac2      	subs	r2, r0, r3
 8004b5a:	bf1c      	itt	ne
 8004b5c:	1a1b      	subne	r3, r3, r0
 8004b5e:	50a3      	strne	r3, [r4, r2]
 8004b60:	e7af      	b.n	8004ac2 <_malloc_r+0x22>
 8004b62:	6862      	ldr	r2, [r4, #4]
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	bf0c      	ite	eq
 8004b68:	f8c8 2000 	streq.w	r2, [r8]
 8004b6c:	605a      	strne	r2, [r3, #4]
 8004b6e:	e7eb      	b.n	8004b48 <_malloc_r+0xa8>
 8004b70:	4623      	mov	r3, r4
 8004b72:	6864      	ldr	r4, [r4, #4]
 8004b74:	e7ae      	b.n	8004ad4 <_malloc_r+0x34>
 8004b76:	463c      	mov	r4, r7
 8004b78:	687f      	ldr	r7, [r7, #4]
 8004b7a:	e7b6      	b.n	8004aea <_malloc_r+0x4a>
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	d1fb      	bne.n	8004b7c <_malloc_r+0xdc>
 8004b84:	2300      	movs	r3, #0
 8004b86:	6053      	str	r3, [r2, #4]
 8004b88:	e7de      	b.n	8004b48 <_malloc_r+0xa8>
 8004b8a:	230c      	movs	r3, #12
 8004b8c:	6033      	str	r3, [r6, #0]
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f000 f80c 	bl	8004bac <__malloc_unlock>
 8004b94:	e794      	b.n	8004ac0 <_malloc_r+0x20>
 8004b96:	6005      	str	r5, [r0, #0]
 8004b98:	e7d6      	b.n	8004b48 <_malloc_r+0xa8>
 8004b9a:	bf00      	nop
 8004b9c:	2000096c 	.word	0x2000096c

08004ba0 <__malloc_lock>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	@ (8004ba8 <__malloc_lock+0x8>)
 8004ba2:	f7ff bf0e 	b.w	80049c2 <__retarget_lock_acquire_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20000964 	.word	0x20000964

08004bac <__malloc_unlock>:
 8004bac:	4801      	ldr	r0, [pc, #4]	@ (8004bb4 <__malloc_unlock+0x8>)
 8004bae:	f7ff bf09 	b.w	80049c4 <__retarget_lock_release_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	20000964 	.word	0x20000964

08004bb8 <__sfputc_r>:
 8004bb8:	6893      	ldr	r3, [r2, #8]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	b410      	push	{r4}
 8004bc0:	6093      	str	r3, [r2, #8]
 8004bc2:	da08      	bge.n	8004bd6 <__sfputc_r+0x1e>
 8004bc4:	6994      	ldr	r4, [r2, #24]
 8004bc6:	42a3      	cmp	r3, r4
 8004bc8:	db01      	blt.n	8004bce <__sfputc_r+0x16>
 8004bca:	290a      	cmp	r1, #10
 8004bcc:	d103      	bne.n	8004bd6 <__sfputc_r+0x1e>
 8004bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bd2:	f7ff bde8 	b.w	80047a6 <__swbuf_r>
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	1c58      	adds	r0, r3, #1
 8004bda:	6010      	str	r0, [r2, #0]
 8004bdc:	7019      	strb	r1, [r3, #0]
 8004bde:	4608      	mov	r0, r1
 8004be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <__sfputs_r>:
 8004be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be8:	4606      	mov	r6, r0
 8004bea:	460f      	mov	r7, r1
 8004bec:	4614      	mov	r4, r2
 8004bee:	18d5      	adds	r5, r2, r3
 8004bf0:	42ac      	cmp	r4, r5
 8004bf2:	d101      	bne.n	8004bf8 <__sfputs_r+0x12>
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	e007      	b.n	8004c08 <__sfputs_r+0x22>
 8004bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bfc:	463a      	mov	r2, r7
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f7ff ffda 	bl	8004bb8 <__sfputc_r>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d1f3      	bne.n	8004bf0 <__sfputs_r+0xa>
 8004c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c0c <_vfiprintf_r>:
 8004c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c10:	460d      	mov	r5, r1
 8004c12:	b09d      	sub	sp, #116	@ 0x74
 8004c14:	4614      	mov	r4, r2
 8004c16:	4698      	mov	r8, r3
 8004c18:	4606      	mov	r6, r0
 8004c1a:	b118      	cbz	r0, 8004c24 <_vfiprintf_r+0x18>
 8004c1c:	6a03      	ldr	r3, [r0, #32]
 8004c1e:	b90b      	cbnz	r3, 8004c24 <_vfiprintf_r+0x18>
 8004c20:	f7ff fcd8 	bl	80045d4 <__sinit>
 8004c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c26:	07d9      	lsls	r1, r3, #31
 8004c28:	d405      	bmi.n	8004c36 <_vfiprintf_r+0x2a>
 8004c2a:	89ab      	ldrh	r3, [r5, #12]
 8004c2c:	059a      	lsls	r2, r3, #22
 8004c2e:	d402      	bmi.n	8004c36 <_vfiprintf_r+0x2a>
 8004c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c32:	f7ff fec6 	bl	80049c2 <__retarget_lock_acquire_recursive>
 8004c36:	89ab      	ldrh	r3, [r5, #12]
 8004c38:	071b      	lsls	r3, r3, #28
 8004c3a:	d501      	bpl.n	8004c40 <_vfiprintf_r+0x34>
 8004c3c:	692b      	ldr	r3, [r5, #16]
 8004c3e:	b99b      	cbnz	r3, 8004c68 <_vfiprintf_r+0x5c>
 8004c40:	4629      	mov	r1, r5
 8004c42:	4630      	mov	r0, r6
 8004c44:	f7ff fdee 	bl	8004824 <__swsetup_r>
 8004c48:	b170      	cbz	r0, 8004c68 <_vfiprintf_r+0x5c>
 8004c4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c4c:	07dc      	lsls	r4, r3, #31
 8004c4e:	d504      	bpl.n	8004c5a <_vfiprintf_r+0x4e>
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	b01d      	add	sp, #116	@ 0x74
 8004c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5a:	89ab      	ldrh	r3, [r5, #12]
 8004c5c:	0598      	lsls	r0, r3, #22
 8004c5e:	d4f7      	bmi.n	8004c50 <_vfiprintf_r+0x44>
 8004c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c62:	f7ff feaf 	bl	80049c4 <__retarget_lock_release_recursive>
 8004c66:	e7f3      	b.n	8004c50 <_vfiprintf_r+0x44>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c76:	2330      	movs	r3, #48	@ 0x30
 8004c78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e28 <_vfiprintf_r+0x21c>
 8004c7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c80:	f04f 0901 	mov.w	r9, #1
 8004c84:	4623      	mov	r3, r4
 8004c86:	469a      	mov	sl, r3
 8004c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c8c:	b10a      	cbz	r2, 8004c92 <_vfiprintf_r+0x86>
 8004c8e:	2a25      	cmp	r2, #37	@ 0x25
 8004c90:	d1f9      	bne.n	8004c86 <_vfiprintf_r+0x7a>
 8004c92:	ebba 0b04 	subs.w	fp, sl, r4
 8004c96:	d00b      	beq.n	8004cb0 <_vfiprintf_r+0xa4>
 8004c98:	465b      	mov	r3, fp
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f7ff ffa1 	bl	8004be6 <__sfputs_r>
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f000 80a7 	beq.w	8004df8 <_vfiprintf_r+0x1ec>
 8004caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cac:	445a      	add	r2, fp
 8004cae:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 809f 	beq.w	8004df8 <_vfiprintf_r+0x1ec>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cc4:	f10a 0a01 	add.w	sl, sl, #1
 8004cc8:	9304      	str	r3, [sp, #16]
 8004cca:	9307      	str	r3, [sp, #28]
 8004ccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cd2:	4654      	mov	r4, sl
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cda:	4853      	ldr	r0, [pc, #332]	@ (8004e28 <_vfiprintf_r+0x21c>)
 8004cdc:	f7fb fab0 	bl	8000240 <memchr>
 8004ce0:	9a04      	ldr	r2, [sp, #16]
 8004ce2:	b9d8      	cbnz	r0, 8004d1c <_vfiprintf_r+0x110>
 8004ce4:	06d1      	lsls	r1, r2, #27
 8004ce6:	bf44      	itt	mi
 8004ce8:	2320      	movmi	r3, #32
 8004cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cee:	0713      	lsls	r3, r2, #28
 8004cf0:	bf44      	itt	mi
 8004cf2:	232b      	movmi	r3, #43	@ 0x2b
 8004cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cfe:	d015      	beq.n	8004d2c <_vfiprintf_r+0x120>
 8004d00:	9a07      	ldr	r2, [sp, #28]
 8004d02:	4654      	mov	r4, sl
 8004d04:	2000      	movs	r0, #0
 8004d06:	f04f 0c0a 	mov.w	ip, #10
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d10:	3b30      	subs	r3, #48	@ 0x30
 8004d12:	2b09      	cmp	r3, #9
 8004d14:	d94b      	bls.n	8004dae <_vfiprintf_r+0x1a2>
 8004d16:	b1b0      	cbz	r0, 8004d46 <_vfiprintf_r+0x13a>
 8004d18:	9207      	str	r2, [sp, #28]
 8004d1a:	e014      	b.n	8004d46 <_vfiprintf_r+0x13a>
 8004d1c:	eba0 0308 	sub.w	r3, r0, r8
 8004d20:	fa09 f303 	lsl.w	r3, r9, r3
 8004d24:	4313      	orrs	r3, r2
 8004d26:	9304      	str	r3, [sp, #16]
 8004d28:	46a2      	mov	sl, r4
 8004d2a:	e7d2      	b.n	8004cd2 <_vfiprintf_r+0xc6>
 8004d2c:	9b03      	ldr	r3, [sp, #12]
 8004d2e:	1d19      	adds	r1, r3, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	9103      	str	r1, [sp, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bfbb      	ittet	lt
 8004d38:	425b      	neglt	r3, r3
 8004d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8004d3e:	9307      	strge	r3, [sp, #28]
 8004d40:	9307      	strlt	r3, [sp, #28]
 8004d42:	bfb8      	it	lt
 8004d44:	9204      	strlt	r2, [sp, #16]
 8004d46:	7823      	ldrb	r3, [r4, #0]
 8004d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d4a:	d10a      	bne.n	8004d62 <_vfiprintf_r+0x156>
 8004d4c:	7863      	ldrb	r3, [r4, #1]
 8004d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d50:	d132      	bne.n	8004db8 <_vfiprintf_r+0x1ac>
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	1d1a      	adds	r2, r3, #4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	9203      	str	r2, [sp, #12]
 8004d5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d5e:	3402      	adds	r4, #2
 8004d60:	9305      	str	r3, [sp, #20]
 8004d62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e38 <_vfiprintf_r+0x22c>
 8004d66:	7821      	ldrb	r1, [r4, #0]
 8004d68:	2203      	movs	r2, #3
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	f7fb fa68 	bl	8000240 <memchr>
 8004d70:	b138      	cbz	r0, 8004d82 <_vfiprintf_r+0x176>
 8004d72:	9b04      	ldr	r3, [sp, #16]
 8004d74:	eba0 000a 	sub.w	r0, r0, sl
 8004d78:	2240      	movs	r2, #64	@ 0x40
 8004d7a:	4082      	lsls	r2, r0
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	3401      	adds	r4, #1
 8004d80:	9304      	str	r3, [sp, #16]
 8004d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d86:	4829      	ldr	r0, [pc, #164]	@ (8004e2c <_vfiprintf_r+0x220>)
 8004d88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d8c:	2206      	movs	r2, #6
 8004d8e:	f7fb fa57 	bl	8000240 <memchr>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d03f      	beq.n	8004e16 <_vfiprintf_r+0x20a>
 8004d96:	4b26      	ldr	r3, [pc, #152]	@ (8004e30 <_vfiprintf_r+0x224>)
 8004d98:	bb1b      	cbnz	r3, 8004de2 <_vfiprintf_r+0x1d6>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	3307      	adds	r3, #7
 8004d9e:	f023 0307 	bic.w	r3, r3, #7
 8004da2:	3308      	adds	r3, #8
 8004da4:	9303      	str	r3, [sp, #12]
 8004da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da8:	443b      	add	r3, r7
 8004daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dac:	e76a      	b.n	8004c84 <_vfiprintf_r+0x78>
 8004dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004db2:	460c      	mov	r4, r1
 8004db4:	2001      	movs	r0, #1
 8004db6:	e7a8      	b.n	8004d0a <_vfiprintf_r+0xfe>
 8004db8:	2300      	movs	r3, #0
 8004dba:	3401      	adds	r4, #1
 8004dbc:	9305      	str	r3, [sp, #20]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f04f 0c0a 	mov.w	ip, #10
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dca:	3a30      	subs	r2, #48	@ 0x30
 8004dcc:	2a09      	cmp	r2, #9
 8004dce:	d903      	bls.n	8004dd8 <_vfiprintf_r+0x1cc>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0c6      	beq.n	8004d62 <_vfiprintf_r+0x156>
 8004dd4:	9105      	str	r1, [sp, #20]
 8004dd6:	e7c4      	b.n	8004d62 <_vfiprintf_r+0x156>
 8004dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ddc:	4604      	mov	r4, r0
 8004dde:	2301      	movs	r3, #1
 8004de0:	e7f0      	b.n	8004dc4 <_vfiprintf_r+0x1b8>
 8004de2:	ab03      	add	r3, sp, #12
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	462a      	mov	r2, r5
 8004de8:	4b12      	ldr	r3, [pc, #72]	@ (8004e34 <_vfiprintf_r+0x228>)
 8004dea:	a904      	add	r1, sp, #16
 8004dec:	4630      	mov	r0, r6
 8004dee:	f3af 8000 	nop.w
 8004df2:	4607      	mov	r7, r0
 8004df4:	1c78      	adds	r0, r7, #1
 8004df6:	d1d6      	bne.n	8004da6 <_vfiprintf_r+0x19a>
 8004df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dfa:	07d9      	lsls	r1, r3, #31
 8004dfc:	d405      	bmi.n	8004e0a <_vfiprintf_r+0x1fe>
 8004dfe:	89ab      	ldrh	r3, [r5, #12]
 8004e00:	059a      	lsls	r2, r3, #22
 8004e02:	d402      	bmi.n	8004e0a <_vfiprintf_r+0x1fe>
 8004e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e06:	f7ff fddd 	bl	80049c4 <__retarget_lock_release_recursive>
 8004e0a:	89ab      	ldrh	r3, [r5, #12]
 8004e0c:	065b      	lsls	r3, r3, #25
 8004e0e:	f53f af1f 	bmi.w	8004c50 <_vfiprintf_r+0x44>
 8004e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e14:	e71e      	b.n	8004c54 <_vfiprintf_r+0x48>
 8004e16:	ab03      	add	r3, sp, #12
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	462a      	mov	r2, r5
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <_vfiprintf_r+0x228>)
 8004e1e:	a904      	add	r1, sp, #16
 8004e20:	4630      	mov	r0, r6
 8004e22:	f000 f879 	bl	8004f18 <_printf_i>
 8004e26:	e7e4      	b.n	8004df2 <_vfiprintf_r+0x1e6>
 8004e28:	08005458 	.word	0x08005458
 8004e2c:	08005462 	.word	0x08005462
 8004e30:	00000000 	.word	0x00000000
 8004e34:	08004be7 	.word	0x08004be7
 8004e38:	0800545e 	.word	0x0800545e

08004e3c <_printf_common>:
 8004e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	4616      	mov	r6, r2
 8004e42:	4698      	mov	r8, r3
 8004e44:	688a      	ldr	r2, [r1, #8]
 8004e46:	690b      	ldr	r3, [r1, #16]
 8004e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	bfb8      	it	lt
 8004e50:	4613      	movlt	r3, r2
 8004e52:	6033      	str	r3, [r6, #0]
 8004e54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e58:	4607      	mov	r7, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	b10a      	cbz	r2, 8004e62 <_printf_common+0x26>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	6033      	str	r3, [r6, #0]
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	0699      	lsls	r1, r3, #26
 8004e66:	bf42      	ittt	mi
 8004e68:	6833      	ldrmi	r3, [r6, #0]
 8004e6a:	3302      	addmi	r3, #2
 8004e6c:	6033      	strmi	r3, [r6, #0]
 8004e6e:	6825      	ldr	r5, [r4, #0]
 8004e70:	f015 0506 	ands.w	r5, r5, #6
 8004e74:	d106      	bne.n	8004e84 <_printf_common+0x48>
 8004e76:	f104 0a19 	add.w	sl, r4, #25
 8004e7a:	68e3      	ldr	r3, [r4, #12]
 8004e7c:	6832      	ldr	r2, [r6, #0]
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	42ab      	cmp	r3, r5
 8004e82:	dc26      	bgt.n	8004ed2 <_printf_common+0x96>
 8004e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	3b00      	subs	r3, #0
 8004e8c:	bf18      	it	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	0692      	lsls	r2, r2, #26
 8004e92:	d42b      	bmi.n	8004eec <_printf_common+0xb0>
 8004e94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e98:	4641      	mov	r1, r8
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	47c8      	blx	r9
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d01e      	beq.n	8004ee0 <_printf_common+0xa4>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	6922      	ldr	r2, [r4, #16]
 8004ea6:	f003 0306 	and.w	r3, r3, #6
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	bf02      	ittt	eq
 8004eae:	68e5      	ldreq	r5, [r4, #12]
 8004eb0:	6833      	ldreq	r3, [r6, #0]
 8004eb2:	1aed      	subeq	r5, r5, r3
 8004eb4:	68a3      	ldr	r3, [r4, #8]
 8004eb6:	bf0c      	ite	eq
 8004eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ebc:	2500      	movne	r5, #0
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	bfc4      	itt	gt
 8004ec2:	1a9b      	subgt	r3, r3, r2
 8004ec4:	18ed      	addgt	r5, r5, r3
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	341a      	adds	r4, #26
 8004eca:	42b5      	cmp	r5, r6
 8004ecc:	d11a      	bne.n	8004f04 <_printf_common+0xc8>
 8004ece:	2000      	movs	r0, #0
 8004ed0:	e008      	b.n	8004ee4 <_printf_common+0xa8>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4652      	mov	r2, sl
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	4638      	mov	r0, r7
 8004eda:	47c8      	blx	r9
 8004edc:	3001      	adds	r0, #1
 8004ede:	d103      	bne.n	8004ee8 <_printf_common+0xac>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee8:	3501      	adds	r5, #1
 8004eea:	e7c6      	b.n	8004e7a <_printf_common+0x3e>
 8004eec:	18e1      	adds	r1, r4, r3
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	2030      	movs	r0, #48	@ 0x30
 8004ef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ef6:	4422      	add	r2, r4
 8004ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f00:	3302      	adds	r3, #2
 8004f02:	e7c7      	b.n	8004e94 <_printf_common+0x58>
 8004f04:	2301      	movs	r3, #1
 8004f06:	4622      	mov	r2, r4
 8004f08:	4641      	mov	r1, r8
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	47c8      	blx	r9
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d0e6      	beq.n	8004ee0 <_printf_common+0xa4>
 8004f12:	3601      	adds	r6, #1
 8004f14:	e7d9      	b.n	8004eca <_printf_common+0x8e>
	...

08004f18 <_printf_i>:
 8004f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	7e0f      	ldrb	r7, [r1, #24]
 8004f1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f20:	2f78      	cmp	r7, #120	@ 0x78
 8004f22:	4691      	mov	r9, r2
 8004f24:	4680      	mov	r8, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	469a      	mov	sl, r3
 8004f2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f2e:	d807      	bhi.n	8004f40 <_printf_i+0x28>
 8004f30:	2f62      	cmp	r7, #98	@ 0x62
 8004f32:	d80a      	bhi.n	8004f4a <_printf_i+0x32>
 8004f34:	2f00      	cmp	r7, #0
 8004f36:	f000 80d1 	beq.w	80050dc <_printf_i+0x1c4>
 8004f3a:	2f58      	cmp	r7, #88	@ 0x58
 8004f3c:	f000 80b8 	beq.w	80050b0 <_printf_i+0x198>
 8004f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f48:	e03a      	b.n	8004fc0 <_printf_i+0xa8>
 8004f4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f4e:	2b15      	cmp	r3, #21
 8004f50:	d8f6      	bhi.n	8004f40 <_printf_i+0x28>
 8004f52:	a101      	add	r1, pc, #4	@ (adr r1, 8004f58 <_printf_i+0x40>)
 8004f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f58:	08004fb1 	.word	0x08004fb1
 8004f5c:	08004fc5 	.word	0x08004fc5
 8004f60:	08004f41 	.word	0x08004f41
 8004f64:	08004f41 	.word	0x08004f41
 8004f68:	08004f41 	.word	0x08004f41
 8004f6c:	08004f41 	.word	0x08004f41
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	08004f41 	.word	0x08004f41
 8004f78:	08004f41 	.word	0x08004f41
 8004f7c:	08004f41 	.word	0x08004f41
 8004f80:	08004f41 	.word	0x08004f41
 8004f84:	080050c3 	.word	0x080050c3
 8004f88:	08004fef 	.word	0x08004fef
 8004f8c:	0800507d 	.word	0x0800507d
 8004f90:	08004f41 	.word	0x08004f41
 8004f94:	08004f41 	.word	0x08004f41
 8004f98:	080050e5 	.word	0x080050e5
 8004f9c:	08004f41 	.word	0x08004f41
 8004fa0:	08004fef 	.word	0x08004fef
 8004fa4:	08004f41 	.word	0x08004f41
 8004fa8:	08004f41 	.word	0x08004f41
 8004fac:	08005085 	.word	0x08005085
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6032      	str	r2, [r6, #0]
 8004fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e09c      	b.n	80050fe <_printf_i+0x1e6>
 8004fc4:	6833      	ldr	r3, [r6, #0]
 8004fc6:	6820      	ldr	r0, [r4, #0]
 8004fc8:	1d19      	adds	r1, r3, #4
 8004fca:	6031      	str	r1, [r6, #0]
 8004fcc:	0606      	lsls	r6, r0, #24
 8004fce:	d501      	bpl.n	8004fd4 <_printf_i+0xbc>
 8004fd0:	681d      	ldr	r5, [r3, #0]
 8004fd2:	e003      	b.n	8004fdc <_printf_i+0xc4>
 8004fd4:	0645      	lsls	r5, r0, #25
 8004fd6:	d5fb      	bpl.n	8004fd0 <_printf_i+0xb8>
 8004fd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	da03      	bge.n	8004fe8 <_printf_i+0xd0>
 8004fe0:	232d      	movs	r3, #45	@ 0x2d
 8004fe2:	426d      	negs	r5, r5
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fe8:	4858      	ldr	r0, [pc, #352]	@ (800514c <_printf_i+0x234>)
 8004fea:	230a      	movs	r3, #10
 8004fec:	e011      	b.n	8005012 <_printf_i+0xfa>
 8004fee:	6821      	ldr	r1, [r4, #0]
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	0608      	lsls	r0, r1, #24
 8004ff4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ff8:	d402      	bmi.n	8005000 <_printf_i+0xe8>
 8004ffa:	0649      	lsls	r1, r1, #25
 8004ffc:	bf48      	it	mi
 8004ffe:	b2ad      	uxthmi	r5, r5
 8005000:	2f6f      	cmp	r7, #111	@ 0x6f
 8005002:	4852      	ldr	r0, [pc, #328]	@ (800514c <_printf_i+0x234>)
 8005004:	6033      	str	r3, [r6, #0]
 8005006:	bf14      	ite	ne
 8005008:	230a      	movne	r3, #10
 800500a:	2308      	moveq	r3, #8
 800500c:	2100      	movs	r1, #0
 800500e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005012:	6866      	ldr	r6, [r4, #4]
 8005014:	60a6      	str	r6, [r4, #8]
 8005016:	2e00      	cmp	r6, #0
 8005018:	db05      	blt.n	8005026 <_printf_i+0x10e>
 800501a:	6821      	ldr	r1, [r4, #0]
 800501c:	432e      	orrs	r6, r5
 800501e:	f021 0104 	bic.w	r1, r1, #4
 8005022:	6021      	str	r1, [r4, #0]
 8005024:	d04b      	beq.n	80050be <_printf_i+0x1a6>
 8005026:	4616      	mov	r6, r2
 8005028:	fbb5 f1f3 	udiv	r1, r5, r3
 800502c:	fb03 5711 	mls	r7, r3, r1, r5
 8005030:	5dc7      	ldrb	r7, [r0, r7]
 8005032:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005036:	462f      	mov	r7, r5
 8005038:	42bb      	cmp	r3, r7
 800503a:	460d      	mov	r5, r1
 800503c:	d9f4      	bls.n	8005028 <_printf_i+0x110>
 800503e:	2b08      	cmp	r3, #8
 8005040:	d10b      	bne.n	800505a <_printf_i+0x142>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	07df      	lsls	r7, r3, #31
 8005046:	d508      	bpl.n	800505a <_printf_i+0x142>
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	6861      	ldr	r1, [r4, #4]
 800504c:	4299      	cmp	r1, r3
 800504e:	bfde      	ittt	le
 8005050:	2330      	movle	r3, #48	@ 0x30
 8005052:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005056:	f106 36ff 	addle.w	r6, r6, #4294967295
 800505a:	1b92      	subs	r2, r2, r6
 800505c:	6122      	str	r2, [r4, #16]
 800505e:	f8cd a000 	str.w	sl, [sp]
 8005062:	464b      	mov	r3, r9
 8005064:	aa03      	add	r2, sp, #12
 8005066:	4621      	mov	r1, r4
 8005068:	4640      	mov	r0, r8
 800506a:	f7ff fee7 	bl	8004e3c <_printf_common>
 800506e:	3001      	adds	r0, #1
 8005070:	d14a      	bne.n	8005108 <_printf_i+0x1f0>
 8005072:	f04f 30ff 	mov.w	r0, #4294967295
 8005076:	b004      	add	sp, #16
 8005078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	f043 0320 	orr.w	r3, r3, #32
 8005082:	6023      	str	r3, [r4, #0]
 8005084:	4832      	ldr	r0, [pc, #200]	@ (8005150 <_printf_i+0x238>)
 8005086:	2778      	movs	r7, #120	@ 0x78
 8005088:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	6831      	ldr	r1, [r6, #0]
 8005090:	061f      	lsls	r7, r3, #24
 8005092:	f851 5b04 	ldr.w	r5, [r1], #4
 8005096:	d402      	bmi.n	800509e <_printf_i+0x186>
 8005098:	065f      	lsls	r7, r3, #25
 800509a:	bf48      	it	mi
 800509c:	b2ad      	uxthmi	r5, r5
 800509e:	6031      	str	r1, [r6, #0]
 80050a0:	07d9      	lsls	r1, r3, #31
 80050a2:	bf44      	itt	mi
 80050a4:	f043 0320 	orrmi.w	r3, r3, #32
 80050a8:	6023      	strmi	r3, [r4, #0]
 80050aa:	b11d      	cbz	r5, 80050b4 <_printf_i+0x19c>
 80050ac:	2310      	movs	r3, #16
 80050ae:	e7ad      	b.n	800500c <_printf_i+0xf4>
 80050b0:	4826      	ldr	r0, [pc, #152]	@ (800514c <_printf_i+0x234>)
 80050b2:	e7e9      	b.n	8005088 <_printf_i+0x170>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	f023 0320 	bic.w	r3, r3, #32
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	e7f6      	b.n	80050ac <_printf_i+0x194>
 80050be:	4616      	mov	r6, r2
 80050c0:	e7bd      	b.n	800503e <_printf_i+0x126>
 80050c2:	6833      	ldr	r3, [r6, #0]
 80050c4:	6825      	ldr	r5, [r4, #0]
 80050c6:	6961      	ldr	r1, [r4, #20]
 80050c8:	1d18      	adds	r0, r3, #4
 80050ca:	6030      	str	r0, [r6, #0]
 80050cc:	062e      	lsls	r6, r5, #24
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	d501      	bpl.n	80050d6 <_printf_i+0x1be>
 80050d2:	6019      	str	r1, [r3, #0]
 80050d4:	e002      	b.n	80050dc <_printf_i+0x1c4>
 80050d6:	0668      	lsls	r0, r5, #25
 80050d8:	d5fb      	bpl.n	80050d2 <_printf_i+0x1ba>
 80050da:	8019      	strh	r1, [r3, #0]
 80050dc:	2300      	movs	r3, #0
 80050de:	6123      	str	r3, [r4, #16]
 80050e0:	4616      	mov	r6, r2
 80050e2:	e7bc      	b.n	800505e <_printf_i+0x146>
 80050e4:	6833      	ldr	r3, [r6, #0]
 80050e6:	1d1a      	adds	r2, r3, #4
 80050e8:	6032      	str	r2, [r6, #0]
 80050ea:	681e      	ldr	r6, [r3, #0]
 80050ec:	6862      	ldr	r2, [r4, #4]
 80050ee:	2100      	movs	r1, #0
 80050f0:	4630      	mov	r0, r6
 80050f2:	f7fb f8a5 	bl	8000240 <memchr>
 80050f6:	b108      	cbz	r0, 80050fc <_printf_i+0x1e4>
 80050f8:	1b80      	subs	r0, r0, r6
 80050fa:	6060      	str	r0, [r4, #4]
 80050fc:	6863      	ldr	r3, [r4, #4]
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	2300      	movs	r3, #0
 8005102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005106:	e7aa      	b.n	800505e <_printf_i+0x146>
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	4632      	mov	r2, r6
 800510c:	4649      	mov	r1, r9
 800510e:	4640      	mov	r0, r8
 8005110:	47d0      	blx	sl
 8005112:	3001      	adds	r0, #1
 8005114:	d0ad      	beq.n	8005072 <_printf_i+0x15a>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	079b      	lsls	r3, r3, #30
 800511a:	d413      	bmi.n	8005144 <_printf_i+0x22c>
 800511c:	68e0      	ldr	r0, [r4, #12]
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	4298      	cmp	r0, r3
 8005122:	bfb8      	it	lt
 8005124:	4618      	movlt	r0, r3
 8005126:	e7a6      	b.n	8005076 <_printf_i+0x15e>
 8005128:	2301      	movs	r3, #1
 800512a:	4632      	mov	r2, r6
 800512c:	4649      	mov	r1, r9
 800512e:	4640      	mov	r0, r8
 8005130:	47d0      	blx	sl
 8005132:	3001      	adds	r0, #1
 8005134:	d09d      	beq.n	8005072 <_printf_i+0x15a>
 8005136:	3501      	adds	r5, #1
 8005138:	68e3      	ldr	r3, [r4, #12]
 800513a:	9903      	ldr	r1, [sp, #12]
 800513c:	1a5b      	subs	r3, r3, r1
 800513e:	42ab      	cmp	r3, r5
 8005140:	dcf2      	bgt.n	8005128 <_printf_i+0x210>
 8005142:	e7eb      	b.n	800511c <_printf_i+0x204>
 8005144:	2500      	movs	r5, #0
 8005146:	f104 0619 	add.w	r6, r4, #25
 800514a:	e7f5      	b.n	8005138 <_printf_i+0x220>
 800514c:	08005469 	.word	0x08005469
 8005150:	0800547a 	.word	0x0800547a

08005154 <__sflush_r>:
 8005154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800515c:	0716      	lsls	r6, r2, #28
 800515e:	4605      	mov	r5, r0
 8005160:	460c      	mov	r4, r1
 8005162:	d454      	bmi.n	800520e <__sflush_r+0xba>
 8005164:	684b      	ldr	r3, [r1, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	dc02      	bgt.n	8005170 <__sflush_r+0x1c>
 800516a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	dd48      	ble.n	8005202 <__sflush_r+0xae>
 8005170:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005172:	2e00      	cmp	r6, #0
 8005174:	d045      	beq.n	8005202 <__sflush_r+0xae>
 8005176:	2300      	movs	r3, #0
 8005178:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800517c:	682f      	ldr	r7, [r5, #0]
 800517e:	6a21      	ldr	r1, [r4, #32]
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	d030      	beq.n	80051e6 <__sflush_r+0x92>
 8005184:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	0759      	lsls	r1, r3, #29
 800518a:	d505      	bpl.n	8005198 <__sflush_r+0x44>
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005192:	b10b      	cbz	r3, 8005198 <__sflush_r+0x44>
 8005194:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005196:	1ad2      	subs	r2, r2, r3
 8005198:	2300      	movs	r3, #0
 800519a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800519c:	6a21      	ldr	r1, [r4, #32]
 800519e:	4628      	mov	r0, r5
 80051a0:	47b0      	blx	r6
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	d106      	bne.n	80051b6 <__sflush_r+0x62>
 80051a8:	6829      	ldr	r1, [r5, #0]
 80051aa:	291d      	cmp	r1, #29
 80051ac:	d82b      	bhi.n	8005206 <__sflush_r+0xb2>
 80051ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005258 <__sflush_r+0x104>)
 80051b0:	40ca      	lsrs	r2, r1
 80051b2:	07d6      	lsls	r6, r2, #31
 80051b4:	d527      	bpl.n	8005206 <__sflush_r+0xb2>
 80051b6:	2200      	movs	r2, #0
 80051b8:	6062      	str	r2, [r4, #4]
 80051ba:	04d9      	lsls	r1, r3, #19
 80051bc:	6922      	ldr	r2, [r4, #16]
 80051be:	6022      	str	r2, [r4, #0]
 80051c0:	d504      	bpl.n	80051cc <__sflush_r+0x78>
 80051c2:	1c42      	adds	r2, r0, #1
 80051c4:	d101      	bne.n	80051ca <__sflush_r+0x76>
 80051c6:	682b      	ldr	r3, [r5, #0]
 80051c8:	b903      	cbnz	r3, 80051cc <__sflush_r+0x78>
 80051ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80051cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051ce:	602f      	str	r7, [r5, #0]
 80051d0:	b1b9      	cbz	r1, 8005202 <__sflush_r+0xae>
 80051d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051d6:	4299      	cmp	r1, r3
 80051d8:	d002      	beq.n	80051e0 <__sflush_r+0x8c>
 80051da:	4628      	mov	r0, r5
 80051dc:	f7ff fbf4 	bl	80049c8 <_free_r>
 80051e0:	2300      	movs	r3, #0
 80051e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80051e4:	e00d      	b.n	8005202 <__sflush_r+0xae>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b0      	blx	r6
 80051ec:	4602      	mov	r2, r0
 80051ee:	1c50      	adds	r0, r2, #1
 80051f0:	d1c9      	bne.n	8005186 <__sflush_r+0x32>
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0c6      	beq.n	8005186 <__sflush_r+0x32>
 80051f8:	2b1d      	cmp	r3, #29
 80051fa:	d001      	beq.n	8005200 <__sflush_r+0xac>
 80051fc:	2b16      	cmp	r3, #22
 80051fe:	d11e      	bne.n	800523e <__sflush_r+0xea>
 8005200:	602f      	str	r7, [r5, #0]
 8005202:	2000      	movs	r0, #0
 8005204:	e022      	b.n	800524c <__sflush_r+0xf8>
 8005206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800520a:	b21b      	sxth	r3, r3
 800520c:	e01b      	b.n	8005246 <__sflush_r+0xf2>
 800520e:	690f      	ldr	r7, [r1, #16]
 8005210:	2f00      	cmp	r7, #0
 8005212:	d0f6      	beq.n	8005202 <__sflush_r+0xae>
 8005214:	0793      	lsls	r3, r2, #30
 8005216:	680e      	ldr	r6, [r1, #0]
 8005218:	bf08      	it	eq
 800521a:	694b      	ldreq	r3, [r1, #20]
 800521c:	600f      	str	r7, [r1, #0]
 800521e:	bf18      	it	ne
 8005220:	2300      	movne	r3, #0
 8005222:	eba6 0807 	sub.w	r8, r6, r7
 8005226:	608b      	str	r3, [r1, #8]
 8005228:	f1b8 0f00 	cmp.w	r8, #0
 800522c:	dde9      	ble.n	8005202 <__sflush_r+0xae>
 800522e:	6a21      	ldr	r1, [r4, #32]
 8005230:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005232:	4643      	mov	r3, r8
 8005234:	463a      	mov	r2, r7
 8005236:	4628      	mov	r0, r5
 8005238:	47b0      	blx	r6
 800523a:	2800      	cmp	r0, #0
 800523c:	dc08      	bgt.n	8005250 <__sflush_r+0xfc>
 800523e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005246:	81a3      	strh	r3, [r4, #12]
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005250:	4407      	add	r7, r0
 8005252:	eba8 0800 	sub.w	r8, r8, r0
 8005256:	e7e7      	b.n	8005228 <__sflush_r+0xd4>
 8005258:	20400001 	.word	0x20400001

0800525c <_fflush_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	690b      	ldr	r3, [r1, #16]
 8005260:	4605      	mov	r5, r0
 8005262:	460c      	mov	r4, r1
 8005264:	b913      	cbnz	r3, 800526c <_fflush_r+0x10>
 8005266:	2500      	movs	r5, #0
 8005268:	4628      	mov	r0, r5
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	b118      	cbz	r0, 8005276 <_fflush_r+0x1a>
 800526e:	6a03      	ldr	r3, [r0, #32]
 8005270:	b90b      	cbnz	r3, 8005276 <_fflush_r+0x1a>
 8005272:	f7ff f9af 	bl	80045d4 <__sinit>
 8005276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f3      	beq.n	8005266 <_fflush_r+0xa>
 800527e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005280:	07d0      	lsls	r0, r2, #31
 8005282:	d404      	bmi.n	800528e <_fflush_r+0x32>
 8005284:	0599      	lsls	r1, r3, #22
 8005286:	d402      	bmi.n	800528e <_fflush_r+0x32>
 8005288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800528a:	f7ff fb9a 	bl	80049c2 <__retarget_lock_acquire_recursive>
 800528e:	4628      	mov	r0, r5
 8005290:	4621      	mov	r1, r4
 8005292:	f7ff ff5f 	bl	8005154 <__sflush_r>
 8005296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005298:	07da      	lsls	r2, r3, #31
 800529a:	4605      	mov	r5, r0
 800529c:	d4e4      	bmi.n	8005268 <_fflush_r+0xc>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	059b      	lsls	r3, r3, #22
 80052a2:	d4e1      	bmi.n	8005268 <_fflush_r+0xc>
 80052a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052a6:	f7ff fb8d 	bl	80049c4 <__retarget_lock_release_recursive>
 80052aa:	e7dd      	b.n	8005268 <_fflush_r+0xc>

080052ac <__swhatbuf_r>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	460c      	mov	r4, r1
 80052b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b4:	2900      	cmp	r1, #0
 80052b6:	b096      	sub	sp, #88	@ 0x58
 80052b8:	4615      	mov	r5, r2
 80052ba:	461e      	mov	r6, r3
 80052bc:	da0d      	bge.n	80052da <__swhatbuf_r+0x2e>
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052c4:	f04f 0100 	mov.w	r1, #0
 80052c8:	bf14      	ite	ne
 80052ca:	2340      	movne	r3, #64	@ 0x40
 80052cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052d0:	2000      	movs	r0, #0
 80052d2:	6031      	str	r1, [r6, #0]
 80052d4:	602b      	str	r3, [r5, #0]
 80052d6:	b016      	add	sp, #88	@ 0x58
 80052d8:	bd70      	pop	{r4, r5, r6, pc}
 80052da:	466a      	mov	r2, sp
 80052dc:	f000 f848 	bl	8005370 <_fstat_r>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	dbec      	blt.n	80052be <__swhatbuf_r+0x12>
 80052e4:	9901      	ldr	r1, [sp, #4]
 80052e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052ee:	4259      	negs	r1, r3
 80052f0:	4159      	adcs	r1, r3
 80052f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052f6:	e7eb      	b.n	80052d0 <__swhatbuf_r+0x24>

080052f8 <__smakebuf_r>:
 80052f8:	898b      	ldrh	r3, [r1, #12]
 80052fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052fc:	079d      	lsls	r5, r3, #30
 80052fe:	4606      	mov	r6, r0
 8005300:	460c      	mov	r4, r1
 8005302:	d507      	bpl.n	8005314 <__smakebuf_r+0x1c>
 8005304:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	6123      	str	r3, [r4, #16]
 800530c:	2301      	movs	r3, #1
 800530e:	6163      	str	r3, [r4, #20]
 8005310:	b003      	add	sp, #12
 8005312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005314:	ab01      	add	r3, sp, #4
 8005316:	466a      	mov	r2, sp
 8005318:	f7ff ffc8 	bl	80052ac <__swhatbuf_r>
 800531c:	9f00      	ldr	r7, [sp, #0]
 800531e:	4605      	mov	r5, r0
 8005320:	4639      	mov	r1, r7
 8005322:	4630      	mov	r0, r6
 8005324:	f7ff fbbc 	bl	8004aa0 <_malloc_r>
 8005328:	b948      	cbnz	r0, 800533e <__smakebuf_r+0x46>
 800532a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800532e:	059a      	lsls	r2, r3, #22
 8005330:	d4ee      	bmi.n	8005310 <__smakebuf_r+0x18>
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	f043 0302 	orr.w	r3, r3, #2
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	e7e2      	b.n	8005304 <__smakebuf_r+0xc>
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	6020      	str	r0, [r4, #0]
 8005342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	9b01      	ldr	r3, [sp, #4]
 800534a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800534e:	b15b      	cbz	r3, 8005368 <__smakebuf_r+0x70>
 8005350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005354:	4630      	mov	r0, r6
 8005356:	f000 f81d 	bl	8005394 <_isatty_r>
 800535a:	b128      	cbz	r0, 8005368 <__smakebuf_r+0x70>
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	81a3      	strh	r3, [r4, #12]
 8005368:	89a3      	ldrh	r3, [r4, #12]
 800536a:	431d      	orrs	r5, r3
 800536c:	81a5      	strh	r5, [r4, #12]
 800536e:	e7cf      	b.n	8005310 <__smakebuf_r+0x18>

08005370 <_fstat_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4d07      	ldr	r5, [pc, #28]	@ (8005390 <_fstat_r+0x20>)
 8005374:	2300      	movs	r3, #0
 8005376:	4604      	mov	r4, r0
 8005378:	4608      	mov	r0, r1
 800537a:	4611      	mov	r1, r2
 800537c:	602b      	str	r3, [r5, #0]
 800537e:	f7fb fe8d 	bl	800109c <_fstat>
 8005382:	1c43      	adds	r3, r0, #1
 8005384:	d102      	bne.n	800538c <_fstat_r+0x1c>
 8005386:	682b      	ldr	r3, [r5, #0]
 8005388:	b103      	cbz	r3, 800538c <_fstat_r+0x1c>
 800538a:	6023      	str	r3, [r4, #0]
 800538c:	bd38      	pop	{r3, r4, r5, pc}
 800538e:	bf00      	nop
 8005390:	20000960 	.word	0x20000960

08005394 <_isatty_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4d06      	ldr	r5, [pc, #24]	@ (80053b0 <_isatty_r+0x1c>)
 8005398:	2300      	movs	r3, #0
 800539a:	4604      	mov	r4, r0
 800539c:	4608      	mov	r0, r1
 800539e:	602b      	str	r3, [r5, #0]
 80053a0:	f7fb fe8c 	bl	80010bc <_isatty>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d102      	bne.n	80053ae <_isatty_r+0x1a>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	b103      	cbz	r3, 80053ae <_isatty_r+0x1a>
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	bd38      	pop	{r3, r4, r5, pc}
 80053b0:	20000960 	.word	0x20000960

080053b4 <_sbrk_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	4d06      	ldr	r5, [pc, #24]	@ (80053d0 <_sbrk_r+0x1c>)
 80053b8:	2300      	movs	r3, #0
 80053ba:	4604      	mov	r4, r0
 80053bc:	4608      	mov	r0, r1
 80053be:	602b      	str	r3, [r5, #0]
 80053c0:	f7fb fe94 	bl	80010ec <_sbrk>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_sbrk_r+0x1a>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_sbrk_r+0x1a>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	20000960 	.word	0x20000960

080053d4 <_init>:
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	bf00      	nop
 80053d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053da:	bc08      	pop	{r3}
 80053dc:	469e      	mov	lr, r3
 80053de:	4770      	bx	lr

080053e0 <_fini>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr
